{"version":3,"file":"index.js","mappings":";;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,SAAUA,QAAQ,eAC1B,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,QAAS,cAAeJ,GACN,iBAAZC,QACdA,QAAkB,SAAID,EAAQG,QAAQ,SAAUA,QAAQ,eAExDJ,EAAe,SAAIC,EAAQD,EAAY,MAAGA,EAAK,cAChD,CATD,CASGO,MAAM,CAACC,EAAkCC,IAC5C,M,4BCVAN,EAAOD,QAAUO,C,UCAjBN,EAAOD,QAAUM,C,GCCbE,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaX,QAGrB,IAAIC,EAASO,EAAyBE,GAAY,CAGjDV,QAAS,CAAC,GAOX,OAHAa,EAAoBH,GAAUT,EAAQA,EAAOD,QAASS,GAG/CR,EAAOD,OACf,CCrBAS,EAAoBK,EAAKb,IACxB,IAAIc,EAASd,GAAUA,EAAOe,WAC7B,IAAOf,EAAiB,QACxB,IAAM,EAEP,OADAQ,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdN,EAAoBQ,EAAI,CAACjB,EAASmB,KACjC,IAAI,IAAIC,KAAOD,EACXV,EAAoBY,EAAEF,EAAYC,KAASX,EAAoBY,EAAErB,EAASoB,IAC5EE,OAAOC,eAAevB,EAASoB,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDX,EAAoBY,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFlB,EAAoBsB,EAAK/B,IACH,oBAAXgC,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAevB,EAASgC,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAevB,EAAS,aAAc,CAAEkC,OAAO,GAAO,E,2ICI9D,MAAMC,EAAc,IAAIC,MAAO,KAAMC,KAAM,IACzCC,KAAK,CAAEC,EAAGC,KAAa,IAAM,EAAUC,SAAU,KAAOC,OAAQ,KCK3D,MAAMC,EAAyB,kBAAiE,mBAGxF,MAAMC,UAA4D,cAGhF,WAAAC,CAAaC,EAAwBC,GACpCC,MAAOF,EAAOC,GAHR,KAAAE,gBAAoD,KAKrDC,KAAKJ,MAAMK,eACfD,KAAKE,2BAA4BF,KAAKJ,MAAMO,OAE9C,CAEgB,qBAAAC,CAAuBC,GACtC,OAAOL,KAAKM,uBAAwBD,EACrC,CAKQ,4BAAMC,CAAwBD,GAYrC,OATKA,EAAUE,KAAOP,KAAKJ,MAAMW,KAE3BP,KAAKD,uBACHC,KAAKD,gBAAgBS,gBAGtBR,KAAKE,2BAA4BG,EAAUF,SAG7CE,EAAUJ,gBAAkBD,KAAKD,uBAC/BC,KAAKE,2BAA4BG,EAAUF,SAE1C,GAIDH,KAAKJ,MAAMa,WAAaJ,EAAUI,QAC1C,CAEgB,MAAAC,GACf,OACC,kBAACjB,EAAuBkB,SAAQ,CAAC3B,MAAQgB,KAAKD,iBAC3CC,KAAKJ,MAAMa,SAGhB,CAEgB,oBAAAG,GACfZ,KAAKa,iBACN,CAEQ,gCAAMX,CAA4BC,GAEzCH,KAAKD,gBAAkB,IAAIC,KAAKJ,MAAMG,gBAAiBC,KAAKJ,MAAMC,QAAUG,KAAKJ,MAAMkB,gBAEvFd,KAAKD,gBAAgBgB,GAAI,SAAS,CAAE1B,EAAG2B,KACtChB,KAAKJ,MAAMqB,QAASD,EAAWE,MAAO,CACrCC,MAAO,UACPC,mBAAoBJ,EAAWK,eAC7B,IAGJrB,KAAKD,gBAAgBgB,GAAI,eAAe,KACF,UAAhCf,KAAKD,gBAAiBuB,OAAqBtB,KAAKJ,MAAM2B,SAC1DvB,KAAKJ,MAAM2B,QAASvB,KAAKD,gBAAiBF,Q,UAItCG,KAAKD,gBAAgByB,OAAQrB,GACjCsB,OAAOP,IACPlB,KAAKJ,MAAMqB,QAASC,EAAO,CAC1BC,MAAO,iBACPC,oBAAoB,GAClB,GAEN,CAEQ,qBAAMP,GACRb,KAAKD,wBACHC,KAAKD,gBAAgBS,UAC3BR,KAAKD,gBAAkB,KAEzB,EAEc,EAAA2B,aAAwC,CACrDzB,eAAe,EACfgB,QAAS,CAAEC,EAAOS,IAAaC,QAAQV,MAAOA,EAAOS,IAGxC,EAAAE,UAAY,CACzBtB,GAAI,WACJN,cAAe,SACfJ,QAAS,SACTiB,eAAgB,WAChBX,OAAQ,WACRoB,QAAS,SACTN,QAAS,UCrFJ,MAAMa,EA+EZ,WAAAnC,CAAaoC,EAAsBC,GApC3B,KAAAC,aAAmC,KAQnC,KAAAC,OAAmB,KAQnB,KAAAC,qBAA8D,GAe9D,KAAAC,OAA4B,CACnCC,+BAA+B,EAC/BC,mBAAoB,MA+IL,KAAAC,QCjPV,SAA+CC,GACrD,IAAIC,EAAoC,KAExC,MAAO,IAAKC,KACLD,IACLA,EAAa,CACZE,QAASH,KAAOE,KAIXD,EAAWE,QAEpB,CDqO2BC,EAAM,KAC/B,MAAM,aAAEX,EAAY,OAAEG,EAAM,SAAES,EAAQ,WAAEC,GAAe9C,KAElDoC,EAAOE,mBACXF,EAAOE,mBACLS,MAAM,IAAMD,EAAWE,QAAS,CAChCjB,QAASc,EAGTI,YAAajD,KAAKhB,UAIlByC,OAAOP,IACPU,QAAQV,MAAO,8BAA+BA,EAAO,IAGrD6B,KAAMd,EAAciB,SACpBH,MAAM,KACN/C,KAAKkC,OAAS,IAAI,KAGpBE,EAAOC,+BAAgC,EACvCJ,EAAciB,U,IAlKflD,KAAK6C,SAAWd,EAChB/B,KAAK8C,WAAad,EAClBhC,KAAKmD,OACN,CAKA,SAAWnE,GACV,OAAOgB,KAAKkC,MACb,CAOO,cAAAkB,CAAgBpE,GACtBgB,KAAKkC,OAASlD,EAEdgB,KAAKmC,qBAAqBkB,SAASC,GAAYA,EAAUtE,KACzDgB,KAAKmC,qBAAuB,EAC7B,CAUO,aAAAoB,CAAeD,GACrB,MAAM,OAAEpB,EAAM,qBAAEC,GAAyBnC,KAEpCkC,EACJoB,EAAUpB,GAEVC,EAAqBqB,KAAMF,EAE7B,CAoBQ,KAAAH,GACP,MAAM,YAAEM,GAAgB3B,GAClB,OAAEM,EAAM,SAAES,EAAQ,WAAEC,GAAe9C,KAKnC0D,EAAuBD,EAAYlF,IAAKsE,IAAcc,QAAQT,QAAS,MAIvEU,EEvKD,WACN,MAAMC,EAAqB,CAC1BX,QAAS,KACTY,QAAS,MAOV,OAJAD,EAASC,QAAU,IAAIH,SAAYT,IAClCW,EAASX,QAAUA,CAAO,IAGpBW,CACR,CF4JsBE,GACpB/D,KAAKiC,aAAe2B,EAOpB,MAAMI,EAAsBN,EAC1BX,MAAM,IACDX,EAAOC,8BACJsB,QAAQT,aAASxF,IAKzB0E,EAAOE,mBAAqBQ,EAAWmB,QAAQlB,MAAME,IAC/CA,GACJjD,KAAKoD,eAAgBH,GAGfA,KAGDb,EAAOE,sBAEdS,MAAMmB,MAAMjB,IAEPA,GAAeH,EAAWqB,kBACxBrB,EAAWqB,WAAY,CAC5BpC,QAASc,EACTI,e,IAMFF,MAAM,IAAMa,EAAYE,UAGxBrC,OAAOP,IACPU,QAAQV,MAAO,4BAA6BA,EAAO,IAInD6B,MAAM,KACDU,EAAYlF,IAAKsE,KAAemB,GACpCP,EAAYW,OAAQvB,E,IAIvBY,EAAYY,IAAKxB,EAAUmB,EAC5B,EA7LwB,EAAAP,YAAc,IAAIa,IGnB3C,MAAMC,EAAsC,0DAG7B,MAAMC,UAAyC,cAY7D,WAAA7E,CAAaC,GACZE,MAAOF,GARA,KAAA6E,aAAe,gBAKf,KAAAC,gBAAyF,KAKhG1E,KAAK2E,eACN,CAKQ,aAAAA,GACP,MAAM,iBAAEC,GAAqBC,OAE7B,IAAMD,EACL,OAAOhD,QAAQkD,KAAM,6DAGtB,MAAQC,GAAUH,EAAiBI,MAAO,KAAM5F,IAAK6F,QAEhDF,GAAS,IAAMH,EAAiBM,WAAY,UAIjDtD,QAAQkD,KAAM,sFACf,CAEA,mBAAYK,GACX,MAAM,gBAAET,GAAoB1E,KAE5B,OAAO0E,EAAkBA,EAAgB1F,MAAQ,IAClD,CAKA,YAAWoG,GACV,MAAM,gBAAED,GAAoBnF,KAE5B,OAAOmF,EAAkBA,EAAgBC,SAAW,IACrD,CAKA,UAAWC,GACV,MAAM,gBAAEF,GAAoBnF,KAE5B,OAAOmF,EAAkBA,EAAgBG,SAAW,IACrD,CAMgB,qBAAAlF,CAAuBC,GACtC,MAAM,MAAET,EAAK,gBAAE8E,GAAoB1E,KAGnC,OAAKK,EAAUE,KAAOX,EAAMW,KAIvBF,EAAUkF,kBAAoB3F,EAAM2F,kBAIpCb,IACJA,EAAgBnB,eAAe,EAAI+B,eAC7BtF,KAAKwF,wBAAyB5F,EAAOS,EAAWiF,IACpDA,EAASG,KAAKpB,IAAKhE,EAAUoF,K,IAI1B,aAAcpF,GAClBqE,EAAgBnB,eAAe,EAAI+B,eAC7BjF,EAAUqF,SACdJ,EAASK,mBAAoBpB,GAE7Be,EAASM,oBAAqBrB,E,MAM3B,GACR,CAKgB,iBAAAsB,GACf7F,KAAK8F,yBACN,CAKgB,kBAAAC,GACf/F,KAAK8F,yBACN,CAKgB,oBAAAlF,GACfZ,KAAKgG,2BACN,CAKQ,yBAAAA,GACFhG,KAAK0E,kBACT1E,KAAK0E,gBAAgBnC,UACrBvC,KAAK0E,gBAAkB,KAEzB,CAKQ,uBAAAoB,GACP9F,KAAKgG,4BACLhG,KAAK0E,gBAAkB,IAAI5C,EAA2B9B,KAAKyE,aAAa9B,QAAU,CACjFsB,MAAOC,SAAYlE,KAAKiG,oBACxB9B,WAAY,EAAIlB,kBACf,MAAM,QAAE1B,GAAYvB,KAAKJ,MAEpB2B,GAAyC,OAA9BvB,KAAKyE,aAAa9B,SACjCpB,EAAS0B,EAAYqC,S,EAGvBtC,QAASkB,OAAUnC,UAASkB,kBAC3B,MAAM,eAAEiD,GAAmBlG,KAAKJ,MAEhC,UACOI,KAAKmG,eAAgBlD,GAO3BlB,EAAQqE,UAAY,E,SAMfF,GACJA,EAAgBjD,EAAYqC,S,IAKjC,CAKgB,MAAA5E,GACf,OACC,yBAAK2F,IAAMrG,KAAKyE,cAElB,CAKQ,uBAAMwB,GACb,GAAKjG,KAAKJ,MAAM2F,gBAAkB,CAGjC,MAAO,CACND,eAHsBtF,KAAKsG,cAAetG,KAAKyE,aAAa9B,QAAU3C,KAAKuG,cAI3EnB,SAAU,K,CAIZ,MAAMA,EAAW,KACXpF,KAAKH,mBAAmBG,KAAKJ,MAAMyF,OAAOmB,gBACvC,IAAIC,EAAuBzG,KAAKH,SAGjC,IAAIG,KAAKJ,MAAMyF,OAAOqB,eAAgB1G,KAAKJ,MAAMyF,OAAQrF,KAAKJ,MAAMkB,gBAL3D,GAQX6F,EAAmB,CACxBhE,QAAS,GA8CV,OA3CAyC,EAASwB,YAAY1C,MAAQ2C,EAAI1G,KAChC,MAAM,gBAAEuE,GAAoB1E,MACtB,eAAEkG,GAAmBlG,KAAKJ,MAE3B+G,EAAiBhE,QAAU,GAC9BuD,GACAxB,GACAA,EAAgB1F,OAChB0F,EAAgB1F,MAAMsG,UACvBY,EAAgBxB,EAAgB1F,MAAMsG,UAGvC,MAAMA,QAAiBtF,KAAKsG,cAAeO,EAAW1G,GAgBtD,OAdKwG,EAAiBhE,QAAU,IAC/B+B,EAAiBtB,eAAgB,CAChCkC,WACAF,aAGD0B,YAAY,KACN9G,KAAKJ,MAAM2B,SACfvB,KAAKJ,MAAM2B,QAAS6D,EAAUC,O,KAKjCsB,EAAiBhE,UACV2C,CAAQ,IAGhBF,EAASrE,GAAI,SAAS,CAAE1B,GAAK6B,QAAOG,qBACnBrB,KAAKJ,MAAMqB,SAAWW,QAAQV,OACrCA,EAAO,CAAEC,MAAO,UAAW4F,kBAAmB1F,GAAiB,UAGnE+D,EACJ5D,OAAQxB,KAAKyE,aAAa9B,QAAU3C,KAAKuG,cACzC9E,OAAOP,KACSlB,KAAKJ,MAAMqB,SAAWW,QAAQV,OACrCA,EAAO,CAAEC,MAAO,iBAAkB4F,mBAAmB,GAAS,IAGlE,CACN3B,WACAE,SAAUF,EAAUC,OAEtB,CAQQ,aAAAiB,CAAevE,EAAwD5B,GAC9E,OAAOH,KAAKJ,MAAMyF,OAAO7D,OAAQO,EAAwB5B,GACvD4C,MAAMsC,IACD,aAAcrF,KAAKJ,OAGlBI,KAAKJ,MAAM8F,UACfL,EAAOM,mBAAoBpB,GAI7B,MAAMyC,EAAgB3B,EAAO4B,MAAMC,SAC7BC,EAAe9B,EAAO+B,QAAQC,KAAKH,SAuBzC,OArBAF,EAAcjG,GAAyB,eAAeuG,IAEhDtH,KAAKJ,MAAM2H,UACfvH,KAAKJ,MAAM2H,SAAUD,EAAOjC,E,IAI9B8B,EAAapG,GAAI,SAASuG,IAEpBtH,KAAKJ,MAAM4H,SACfxH,KAAKJ,MAAM4H,QAASF,EAAOjC,E,IAI7B8B,EAAapG,GAAI,QAAQuG,IAEnBtH,KAAKJ,MAAM6H,QACfzH,KAAKJ,MAAM6H,OAAQH,EAAOjC,E,IAIrBA,CAAM,GAEhB,CAKQ,oBAAMc,CAAgBuB,GAC7B,MAAM,SAAEtC,EAAQ,SAAEE,GAAaoC,EAE/B,OAAO,IAAI/D,SAAe,CAAET,EAASyE,KAQpCb,YAAY5C,UACX,IACC,GAAKkB,EAEJ,aADMA,EAAS5E,UACR0C,IAGR,GAAKoC,EAEJ,aADMA,EAAS9E,UACR0C,IAGRA,G,CACC,MAAQ0E,GACThG,QAAQV,MAAO0G,GACfD,EAAQC,E,IAEP,GAEL,CASQ,uBAAApC,CAAyBqC,EAAqCxH,EAAqCgF,GAK1G,OAAKwC,EAAUpC,OAASpF,EAAUoF,MAK7BJ,EAAOI,KAAKlH,QAAU8B,EAAUoF,IAKtC,CAKQ,UAAAc,GACP,MAAMpG,EAASH,KAAKJ,MAAMO,QAAU,CAAC,EAUrC,OARKH,KAAKJ,MAAM6F,MAAQtF,EAAO2H,aAC9BlG,QAAQkD,KACP,+LAMK,IACH3E,EACH2H,YAAa3H,EAAO2H,aAAe9H,KAAKJ,MAAM6F,MAAQ,GAExD,EAEuB,EAAAsC,YAActI,EAGvB,EAAAoC,UAAY,CACzBwD,OAAQ,SAAe2C,WACvBvC,KAAM,WACNtF,OAAQ,WACRoF,gBAAiB,SACjBzE,eAAgB,WAChByG,SAAU,SACVhG,QAAS,SACTiG,QAAS,SACTC,OAAQ,SACRxG,QAAS,SACTyE,SAAU,SACVnF,GAAI,SAgCC,MAAMkG,EAmBZ,WAAA9G,CAAaI,GACZC,KAAKiI,iBAAmBlI,EACxBC,KAAKkI,ILjcA,WAWN,MAAMC,EAAqB,WAAhBC,KAAKC,WAA2B,EACrCC,EAAqB,WAAhBF,KAAKC,WAA2B,EACrCE,EAAqB,WAAhBH,KAAKC,WAA2B,EACrCG,EAAqB,WAAhBJ,KAAKC,WAA2B,EAG3C,MAAO,IACNpJ,EAAuB,IAAVkJ,GACblJ,EAAakJ,GAAM,EAAI,KACvBlJ,EAAakJ,GAAM,GAAK,KACxBlJ,EAAakJ,GAAM,GAAK,KACxBlJ,EAAuB,IAAVqJ,GACbrJ,EAAaqJ,GAAM,EAAI,KACvBrJ,EAAaqJ,GAAM,GAAK,KACxBrJ,EAAaqJ,GAAM,GAAK,KACxBrJ,EAAuB,IAAVsJ,GACbtJ,EAAasJ,GAAM,EAAI,KACvBtJ,EAAasJ,GAAM,GAAK,KACxBtJ,EAAasJ,GAAM,GAAK,KACxBtJ,EAAuB,IAAVuJ,GACbvJ,EAAauJ,GAAM,EAAI,KACvBvJ,EAAauJ,GAAM,GAAK,KACxBvJ,EAAauJ,GAAM,GAAK,IAC1B,CK+ZaC,EACZ,CAKO,UAAA7B,CAAY8B,GAClB1I,KAAK2I,SAAWD,CACjB,CAQO,MAAAlH,CAAQoH,EAA2CzI,GACzD,OAAOH,KAAKiI,iBAAiBY,IAAK,CACjCD,sBACAzI,SACAuI,QAAS1I,KAAK2I,SACdpI,GAAIP,KAAKkI,IACTY,KAAM,UAER,CAMO,EAAA/H,CAAI1B,EAAWiE,GAErBtD,KAAKiI,iBAAiBlH,GAAI,aAAa,CAAE1B,GAAK0J,SAAQ7H,YAChD6H,IAAW/I,KAAKkI,KACpB5E,EAAU,KAAM,CAAEpC,QAAOG,mBAAe3D,G,GAG3C,CAEO,OAAA8C,GAWN,MAAqC,UAAhCR,KAAKiI,iBAAiB3G,MACnBtB,KAAKiI,iBAAiBe,OAAQhJ,KAAKkI,KAGpCvE,QAAQT,SAChB,CAKA,UAAWmC,GACV,OAAOrF,KAAKiI,iBAAiBgB,QAASjJ,KAAKkI,IAC5C,ECvgBM,SAASgB,KAAiBC,GAChC,OAAOnK,IACNmK,EAAK9F,SAASgD,IACO,mBAARA,EACXA,EAAKrH,GACa,MAAPqH,IACXA,EAAI1D,QAAU3D,E,GAEb,CAEL,CChBO,SAASoK,EAAgDC,EAAWC,GAC1E,IAAM,MAAM7K,KAAQL,OAAOmL,oBAAqBD,UACxCA,EAAa7K,GAIrB,IAAM,MAAQP,EAAKc,KAAWZ,OAAOoL,QAASH,GACxCrK,IAAUsK,GAAuB,cAARpL,GAA+B,cAARA,IAClDoL,EAAsBpL,GAAQc,GAIlC,OAAOsK,CACR,CCVO,MAAMG,EAAoDjH,IAChE,MAAMkH,GAAc,IAAAC,UAGpB,OAFAD,EAAY/G,QAAUH,GAEf,IAAAoH,cACN,IAAKlH,IAAkBgH,EAAY/G,WAA2BD,IAC9D,GACA,ECVK,SAASmH,EAAsCR,EAAWC,GAIhE,OAHAA,EAAYQ,OAAS,EACrBR,EAAY9F,QAAS6F,GAEdC,CACR,CCLO,MCIMS,EAAyB,CACrCC,EACAxH,EACAyH,KCD+B,EAAEzH,EAAkByH,KACnD,MAAMC,GAAW,IAAAP,QAAa,MFPK,EACnC3L,EACAmM,KAEA,GAAKnM,IAAMmM,EACV,OAAO,EAGR,IAAMnM,IAAMmM,EACX,OAAO,EAGR,IAAM,IAAIC,EAAI,EAAGA,EAAIpM,EAAE8L,SAAUM,EAChC,GAAKpM,EAAGoM,KAAQD,EAAGC,GAClB,OAAO,EAIT,OAAO,CAAI,EETLC,CAAsBH,EAASvH,QAASsH,KAC7CC,EAASvH,QAAU,IAAKsH,GACxBzH,I,EDFD8H,EAAkB,KACZN,GACJA,EAAUzG,cAAef,E,GAExB,CAAEwH,KAAcC,GAAQ,EEkBtB,EAAsC,0DAigBtCM,GAAiB,IAAAC,OAAM,IAAAC,aAAY,EAAIlK,KAAIyJ,YAAWU,YAIzDrE,KACF,MAAMsE,GAAW,IAAAhB,QAAwB,MAuBzC,OArBA,IAAAiB,YAAW,KACV,IAAIC,EACAxF,EAYJ,OAVA2E,EAAUzG,eAAe,EAAI+B,eACvBqF,EAAShI,UACb0C,EAASC,EACTuF,EAAWvF,EAASwF,GAAGzD,KAAK0D,eAAgBL,EAAUC,EAAShI,SAE/D2C,EAASwF,GAAGE,YAAaH,GACzBvF,EAAS8B,QAAQC,KAAK4D,c,IAIjB,KACDJ,GAAYF,EAAShI,SAAW0C,GAA2B,cAAjBA,EAAO/D,OACrD+D,EAAOyF,GAAGI,eAAgBL,E,CAE3B,GACC,CAAEb,EAAUmB,WAGd,yBACCjN,IAAK8L,EAAUmB,SACf5K,GAAIA,EACJ8F,IAAM6C,EAAW7C,EAAKsE,IAEvB,KAGFJ,EAAea,YAAc,iBAE7B,MAAMC,GAAuB,IAAAZ,aAAY,EAAIpF,UAAegB,KAC3D,MAAMiF,GAAa,IAAA3B,QAAwB,MAsB3C,OApBA,IAAAiB,YAAW,KACV,MAAMW,EAAmBD,EAAW3I,QAEpC,IAAM0C,IAAWkG,EAChB,OAGD,MAAMxJ,EAAUsD,EAAOyF,GAAGzD,KAAKmE,QAAQzJ,QAMvC,OAJKwJ,GACJA,EAAiBE,YAAa1J,GAGxB,KACDwJ,GACJA,EAAiBG,YAAa3J,E,CAE/B,GACC,CAAEsD,GAAUA,EAAO9E,KAEf,yBAAK8F,IAAK6C,EAAWoC,EAAYjF,IAAa,IAGtDgF,EAAqBD,YAAc,uBAEnC,QAjkB6BxL,IAC5B,MAAM+L,GAAsB,IAAAhC,QAAqB/J,EAAMgM,kBAAoB,MACrE5B,ECrBqC,MAC3C,MAAM6B,GAAe,IAAAlC,QAA6C,OAC1DwB,EAAUW,IAAgB,IAAAC,WAAU,IAAMC,KAAKC,QAEjDC,EAAU,KACfJ,EAAaE,KAAKC,MAAO,EAGpB1J,EAAU,CAAE4J,GAAoB,KAChCN,EAAalJ,UACjBkJ,EAAalJ,QAAQJ,UACrBsJ,EAAalJ,QAAU,MAGnBwJ,GACJL,EAAaE,KAAKC,M,EASd1I,EAAkBD,IAClBuI,EAAalJ,SACjBkJ,EAAalJ,QAAQY,cAAeD,E,EAsBtC,MAAO,CACN,WAAIX,GACH,OAAOkJ,EAAalJ,OACrB,EACAwI,WACAiB,mBAf+ClO,IAA+B,CAC9E,WAAIyE,GACH,OAAMkJ,EAAalJ,SAAYkJ,EAAalJ,QAAQ3D,MAI7C6M,EAAalJ,QAAQ3D,MAAOd,GAH3B,IAIT,IASAkF,eAnCwBpE,I,MACJ,QAApB,EAAA6M,EAAalJ,eAAO,SAAES,eAAgBpE,GACtCkN,GAAS,EAkCT3J,UACA8J,QA1BiBC,IACjB/J,GAAS,GACTsJ,EAAalJ,QAAU2J,IAEvBJ,IACA3I,EAAe2I,EAAS,EAsBxB3I,gBACA,EDrCiBgJ,GAEZC,EAAsD,CAC3DpH,SAAU4E,EAAUoC,mBAAoB,YACxC9G,SAAU0E,EAAUoC,mBAAoB,aAGnCvM,GAAU,IAAA4M,YAAYhN,IAGpBiN,EAAOC,IAAa,IAAAZ,WAAyB,IAAM3N,OAAOwO,KAAMhN,EAAM6F,SAGtEA,EAAMoH,IAAY,IAAAd,UAAkC,IAAKnM,EAAM6F,QAG/DqH,EAAYC,IAAkB,IAAAhB,UAAmD,IAAKnM,EAAMoN,kBAE9FC,GAAqB,IAAAtD,SAAiB,IAE5C,IAAAiB,YAAW,KACV,MAAMgB,EAAmBD,EAAoBhJ,QAE7C,GAAMiJ,IAA4C,IAAxBhM,EAAMK,cAqChC,OAjCA+J,EAAUqC,SAAS,IAAM,IAAIvK,EAA2B8J,EAAkB,CACzE3H,MAAOgC,EACP9B,WAAY,EAAIlB,kBACf,MAAM,QAAE1B,GAAY3B,EAEf2B,GAA2C,OAAhCoK,EAAoBhJ,SACnCpB,EAAS0B,EAAYqC,S,EAGvBtC,QAASkB,OAAUnC,UAASkB,kBAC3B,MAAM,eAAEiD,GAAmBtG,EAE3B,UACOuG,EAAgBlD,GAOtBlB,EAAQqE,UAAY,E,SAMfF,GACJA,EAAgBjD,EAAYqC,S,OAMzB,KACN0E,EAAUzH,SAAS,EAAO,CAC1B,GACC,CAAE3C,EAAMW,GAAIX,EAAMK,gBAKrB,MAAMsG,EAAa,KAClB,MAAMpG,EAASP,EAAMO,QAAU,CAAC,EAShC,OAPKP,EAAM6F,MAAQtF,EAAO2H,aACzBlG,QAAQkD,KACP,yLAKK,IACH3E,EACH6M,gBAAiBF,EACjB,EAMII,EAAezD,GAAoB,CAAEpE,EAAyBiC,KACnE,MAAMN,EAAgB3B,EAAQ4B,MAAMC,SAEpC,IAAMtH,EAAMuN,yBAA2B,CACtC,MAAMC,EAAkC,CAAC,EACnCC,EAAyD,CAAC,EAEhErG,EAAcsG,OAAOC,aACnBlK,SAASmK,IACT,IAAI5Q,EAWJ,GARCA,EADmB,UAAf4Q,EAAO1E,MAAmC,UAAf0E,EAAO1E,KAC/B0E,EAAOC,SAAS7Q,KAGhB4Q,EAAOE,MAAM9Q,MAKfA,EAAK+Q,aACV,OAGD,MAAM,SAAEjD,GAAa9N,EAErBwQ,EAAS1C,GAAarF,EAAQuI,QAAS,CAAElD,YAAY,IAGvD1D,EAAcsG,OAAOO,kBACnBxK,SAASyK,IAGT,GAAKA,EAAYxM,MAKhB,iBAJqC5D,IAAhC0P,EAASU,EAAYC,cAClBX,EAASU,EAAYC,OAM9B,MAAMrD,EAAWoD,EAAYC,KAE7BV,EAAe3C,GAAarF,EAAQ2I,kBAAmBtD,EAAU,IAG9DtM,OAAOwO,KAAMQ,GAAUtD,QAC3B+C,GAASoB,IAAgB,IAAOA,KAAiBb,MAG7ChP,OAAOwO,KAAMS,GAAgBvD,QACjCiD,GAAemB,IAAsB,IAAOA,KAAuBb,K,CAKhEzN,EAAM2H,UACV3H,EAAM2H,SAAUD,EAAOjC,E,IAOnB8I,EAAY1E,GAAoB,CAAEpE,EAAyB+I,EAAgBxR,KAChF,MAAM8N,EAAW9N,EAAK8N,SAEhB9K,EAAMuN,2BACXN,GAASoB,IACR,IAAOA,EAAc,CAAEvD,GAAYrF,EAAQuI,QAAS,CAAElD,iBAGvDqC,GAAemB,IACd,IAAOA,EAAoB,CAAExD,GAAYrF,EAAQ2I,kBAAmBtD,QAItEiC,GAAU0B,IAAaC,OExMAjF,EFwMM,IAAKgF,EAAWzR,EAAK8N,UEvM5CxL,MAAMqP,KAAM,IAAIC,IAAKnF,IADtB,IAAkBA,CFwMuC,GAAE,IAM3DoF,EAAehF,GAAoB,CAAEpE,EAAyB+I,EAAgBxR,KACnF,MAAM8N,EAAW9N,EAAK8N,SAEhB9K,EAAMuN,2BACXN,GAASoB,IACR,MAAQ,CAAEvD,GAAarL,KAAM+N,GAAYa,EAEzC,MAAO,IAAKb,EAAS,IAGtBL,GAAemB,IACd,MAAQ,CAAExD,GAAarL,KAAMgO,GAAkBa,EAE/C,MAAO,IAAKb,EAAe,KAI7BV,GAAU0B,GAAaA,EAAUK,QAAQ9R,GAAQA,IAAS8N,KAAY,IASjEpE,EAAgBmD,GAAoB,CACzC3B,EACA3H,KAEAiJ,EAAiB,IAAKxJ,EAAMoN,iBAAmBF,GAC/C1D,EAAiB,IAAKxJ,EAAM6F,MAAQA,GACpCoE,EAAgBzL,OAAOwO,KAAMhN,EAAM6F,MAAQiH,GAEpC9M,EAAMyF,OAAO7D,OAAQsG,EAAa3H,GACvC4C,MAAQsC,IACR,MAAMsJ,EAAatJ,EAAOuJ,cAG1BxF,EAAiB,IAAKuF,GAAclJ,GACpC2D,EAAiB,IAAK/D,EAAOwJ,sBAAwB/B,GACrDjD,EAAgBzL,OAAOwO,KAAM+B,GAAcjC,GAEtC9M,EAAM8F,UAGVL,EAAOM,mBAAoB,GAG5B,MAAMqB,EAAgB3B,EAAO4B,MAAMC,SAC7BC,EAAe9B,EAAO+B,QAAQC,KAAKH,SAqBzC,OAnBAF,EAAcjG,GAAyB,eAAeqN,GAAOlB,EAAc7H,EAAQ+I,KAEnF/I,EAAOtE,GAAkB,WAAW,CAAEqN,EAAKxR,IAAUuR,EAAW9I,EAAQ+I,EAAKxR,KAC7EyI,EAAOtE,GAAqB,cAAc,CAAEqN,EAAKxR,IAAU6R,EAAcpJ,EAAQ+I,EAAKxR,KAEtFuK,EAAapG,GAAI,SAASuG,IAEpB1H,EAAM4H,SACV5H,EAAM4H,QAASF,EAAOjC,E,IAIxB8B,EAAapG,GAAI,QAAQuG,IAEnB1H,EAAM6H,QACV7H,EAAM6H,OAAQH,EAAOjC,E,IAIhBA,CAAM,OAOVc,EAAmBuB,IACxB,MAAM,SAAEtC,EAAQ,SAAEE,GAAaoC,EAE/B,OAAO,IAAI/D,SAAe,CAAET,EAASyE,KAQpCb,YAAY5C,UACX,IACC,GAAKkB,EAEJ,aADMA,EAAS5E,UACR0C,IAGR,GAAKoC,EAEJ,aADMA,EAAS9E,UACR0C,IAGRA,G,CACC,MAAQ0E,GACThG,QAAQV,MAAO0G,GACfD,EAAQC,E,IAEP,GACD,EAME3B,EAAoB/B,UACzB,GAAKtE,EAAM2F,gBAAkB,CAG5B,MAAO,CACND,eAHsBgB,EAAe1G,EAAM6F,KAAac,KAIxDnB,SAAU,K,CAIZ,MAAMA,EACAvF,aAAmBD,EAAMyF,OAAOmB,gBAC7B,IAAIC,EAAuB5G,GAG5B,IAAID,EAAMyF,OAAOqB,eAAgB9G,EAAMyF,OAAQzF,EAAMkB,gBAGvD6F,EAAmB,CACxBhE,QAAS,GA0CV,OAvCAyC,EAASwB,YAAY1C,MAAQuB,EAAMtF,KAClC,MAAM,eAAE+F,GAAmBtG,EAEtB+G,EAAiBhE,QAAU,GAAKuD,GAAkBsG,EAAWlH,SAAS3C,SAC1EuD,EAAgBsG,EAAWlH,SAAS3C,SAGrC,MAAM2C,QAAiBgB,EAAeb,EAAatF,GAgBnD,OAdKwG,EAAiBhE,QAAU,IAC/BqH,EAAU5G,eAAgB,CACzBkC,WACAF,aAGD0B,YAAY,KACNlH,EAAM2B,SACV3B,EAAM2B,QAAS6D,EAAUC,O,KAK5BsB,EAAiBhE,UACV2C,CAAQ,IAGhBF,EAASrE,GAAI,SAAS,CAAE1B,GAAK6B,QAAOG,qBACnBzB,EAAMqB,SAAWW,QAAQV,OAChCA,EAAO,CAAEC,MAAO,UAAW4F,kBAAmB1F,GAAiB,UAGnE+D,EACJ5D,OAAQiE,EAAac,KACrB9E,OAAOP,IAGP,MAFgBtB,EAAMqB,SAAWW,QAAQV,OAChCA,EAAO,CAAEC,MAAO,iBAAkB4F,mBAAmB,IACxD7F,CAAK,IAGN,CACNkE,WACAE,SAAUF,EAAUC,OACpB,EAmBIyJ,GAAqE,IAAAlF,cAC1EwD,IACCpD,EAAUzG,eAAe,KACxB0J,EAAmBtK,SAAU,EAC7BkK,EAASO,EAAS,GAChB,GAEJ,CAAEP,IAGGkC,GAA4F,IAAAnF,cACjGyD,IACCrD,EAAUzG,eAAe,KACxB0J,EAAmBtK,SAAU,EAC7BoK,EAAeM,EAAe,GAC5B,GAEJ,CAAEN,IAGGiC,EACL,kBAAC3D,EAAoB,CACpBhF,IAAMsF,EACNtG,OAAQmH,EAAWlH,SAAS3C,UAI9BoH,EAAwBC,EAAUrH,SAAS,EAAI2C,eACzC1F,EAAM8F,SACVJ,EAASK,mBAAoB,GAE7BL,EAASM,oBAAqB,E,GAE7B,CAAEhG,EAAM8F,WAEXqE,EAAwBC,EAAUrH,SAAS,EAAI2C,eAE9C,GAAK2H,EAAmBtK,QAAU,CACjCsK,EAAmBtK,SAAU,EAE7B,MAAMsM,EAAW7Q,OAAOwO,KAAMnH,GACxByJ,EAAiB9Q,OAAOwO,KAAME,GAOpC,IAAMmC,EAASE,OAAOjR,GAAOgR,EAAeE,SAAUlR,KAErD,MADA0D,QAAQV,MAAO,oEACT,IAAImO,MAAO,oEAGlB,MAAMV,EAAarJ,EAASsJ,cACtBU,EAAmBhK,EAASuJ,sBAGjCU,UAAWC,EACXC,YAAaC,GA1EM,EACrBC,EACAC,KAKA,MAAMC,EAAoBzR,OAAOwO,KAAM+C,GACjCG,EAAe1R,OAAOwO,KAAMgD,GAElC,MAAO,CACNL,UAAWO,EAAapB,QAAQxQ,IAAQ2R,EAAkBT,SAAUlR,KACpEuR,YAAaI,EAAkBnB,QAAQxQ,IAAQ4R,EAAaV,SAAUlR,KACtE,EA8DI6R,CAAepB,EAAYlJ,GAAQ,CAAC,GAElCuK,EAAkBf,EAASgB,MAAMvF,QACXhN,IAA3BiR,EAAYjE,IACZwF,KAAKC,UAAWxB,EAAYjE,MAAiBwF,KAAKC,UAAW1K,EAAMiF,MAG9D0F,EAA6BlB,EAAeR,QAAQhE,GACzDwF,KAAKC,UAAWb,EAAkB5E,MAAiBwF,KAAKC,UAAWrD,EAAYpC,MAE1E2F,EAAoB3D,IACzBA,EAAMrJ,SAASqH,IACdpF,EAAUgL,QAAS5F,EAAU,CAC5BjF,KAAMA,EAAMiF,IAAc,GAC1BoC,YAAYA,aAAU,EAAVA,EAAcpC,KAAc,CAAC,EACzC6F,YAAY,GACV,GACD,EAGEC,EAAwB9D,IAC7BA,EAAMrJ,SAASqH,IACdpF,EAAUmL,WAAY/F,GAAU,EAAM,GACpC,EAGEgG,EAAoB,KAKzBpL,EAASG,KAAKpB,IAAKoB,EAAM,CAAEkL,8BAA8B,GAAe,EAGnEC,EAA0B,CAAEC,EAAgBnE,KACjDA,EAAMrJ,SAASqH,IACdtM,OAAOwO,KAAME,EAAapC,IAAarH,SAASyN,IAC/CxL,EAASyL,sBAAuBD,EAAM,IAGvCD,EAAOG,gBAAiB1L,EAAS2B,MAAMC,SAAS+J,QAASvG,IACzDmG,EAAO9D,cAAeD,EAAapC,GAAYpF,EAAS2B,MAAMC,SAAS+J,QAASvG,GAAa,GAC3F,EAIJ5D,YAAY,KACXxB,EAAS2B,MAAMuG,QAAQqD,IACtBR,EAAiBb,GACjBgB,EAAqBd,GAEhBM,GACJU,IAGIN,EAA2BtG,QAC/B8G,EAAyBC,EAAQT,E,GAEhC,G,IAGH,CAAE3K,EAAMqH,IAEX,MAAMoE,EAAmBxE,EAAMtN,KAC9BsL,GACC,kBAACH,EAAc,CACdrM,IAAKwM,EACLnK,GAAImK,EACJA,SAAUA,EACVV,UAAWA,MAKd,MAAO,CACN3E,OAAQmH,EAAWlH,SAAS3C,QAC5BuO,mBACAlC,iBACAvJ,OAAMoH,QAASiC,EACfhC,aAAYC,cAAegC,EAC3B,C,QrB3hBF","sources":["webpack://CKEditor/webpack/universalModuleDefinition","webpack://CKEditor/external umd \"prop-types\"","webpack://CKEditor/external umd \"react\"","webpack://CKEditor/webpack/bootstrap","webpack://CKEditor/webpack/runtime/compat get default export","webpack://CKEditor/webpack/runtime/define property getters","webpack://CKEditor/webpack/runtime/hasOwnProperty shorthand","webpack://CKEditor/webpack/runtime/make namespace object","webpack://CKEditor/./src/utils/uid.ts","webpack://CKEditor/./src/ckeditorcontext.tsx","webpack://CKEditor/./src/lifecycle/LifeCycleElementSemaphore.ts","webpack://CKEditor/./src/utils/once.ts","webpack://CKEditor/./src/utils/defer.ts","webpack://CKEditor/./src/ckeditor.tsx","webpack://CKEditor/./src/utils/mergeRefs.ts","webpack://CKEditor/./src/utils/overwriteObject.ts","webpack://CKEditor/./src/hooks/useRefSafeCallback.ts","webpack://CKEditor/./src/utils/overwriteArray.ts","webpack://CKEditor/./src/utils/shallowCompareArrays.ts","webpack://CKEditor/./src/hooks/useInstantEditorEffect.ts","webpack://CKEditor/./src/hooks/useInstantEffect.ts","webpack://CKEditor/./src/useMultiRootEditor.tsx","webpack://CKEditor/./src/lifecycle/useLifeCycleSemaphoreSyncRef.tsx","webpack://CKEditor/./src/utils/uniq.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"prop-types\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"prop-types\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CKEditor\"] = factory(require(\"react\"), require(\"prop-types\"));\n\telse\n\t\troot[\"CKEditor\"] = factory(root[\"react\"], root[\"prop-types\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__155__, __WEBPACK_EXTERNAL_MODULE__949__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__949__;","module.exports = __WEBPACK_EXTERNAL_MODULE__155__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * A hash table of hex numbers to avoid using toString() in uid() which is costly.\n * [ '00', '01', '02', ..., 'fe', 'ff' ]\n */\nconst HEX_NUMBERS = new Array( 256 ).fill( '' )\n\t.map( ( _, index ) => ( '0' + ( index ).toString( 16 ) ).slice( -2 ) );\n\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns An unique id string.\n */\nexport function uid(): string {\n\t// Let's create some positive random 32bit integers first.\n\t//\n\t// 1. Math.random() is a float between 0 and 1.\n\t// 2. 0x100000000 is 2^32 = 4294967296.\n\t// 3. >>> 0 enforces integer (in JS all numbers are floating point).\n\t//\n\t// For instance:\n\t//\t\tMath.random() * 0x100000000 = 3366450031.853859\n\t// but\n\t//\t\tMath.random() * 0x100000000 >>> 0 = 3366450031.\n\tconst r1 = Math.random() * 0x100000000 >>> 0;\n\tconst r2 = Math.random() * 0x100000000 >>> 0;\n\tconst r3 = Math.random() * 0x100000000 >>> 0;\n\tconst r4 = Math.random() * 0x100000000 >>> 0;\n\n\t// Make sure that id does not start with number.\n\treturn 'e' +\n\t\tHEX_NUMBERS[ r1 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r1 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r1 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r1 >> 24 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r2 >> 24 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r3 >> 24 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 0 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 8 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 16 & 0xFF ] +\n\t\tHEX_NUMBERS[ r4 >> 24 & 0xFF ];\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport React, { type ReactNode } from 'react';\nimport PropTypes, { type InferProps, type Validator } from 'prop-types';\n\nimport type {\n\tContextWatchdog,\n\tWatchdogConfig,\n\tContext,\n\tContextConfig\n} from 'ckeditor5';\n\nexport const ContextWatchdogContext = React.createContext<ContextWatchdog | 'contextWatchdog' | null>( 'contextWatchdog' );\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport default class CKEditorContext<TContext extends Context = Context> extends React.Component<Props<TContext>, {}> {\n\tpublic contextWatchdog: ContextWatchdog<TContext> | null = null;\n\n\tconstructor( props: Props<TContext>, context: any ) {\n\t\tsuper( props, context );\n\n\t\tif ( this.props.isLayoutReady ) {\n\t\t\tthis._initializeContextWatchdog( this.props.config );\n\t\t}\n\t}\n\n\tpublic override shouldComponentUpdate( nextProps: Readonly<Props<TContext> & { children?: ReactNode | undefined }> ): boolean {\n\t\treturn this._shouldComponentUpdate( nextProps ) as unknown as boolean;\n\t}\n\n\t/**\n\t * Wrapper for the async handler. Note that this is an implementation bug, see https://github.com/ckeditor/ckeditor5-react/issues/312.\n\t */\n\tprivate async _shouldComponentUpdate( nextProps: Readonly<Props<TContext> & { children?: ReactNode | undefined }> ): Promise<boolean> {\n\t\t// If the configuration changes then the ContextWatchdog needs to be destroyed and recreated\n\t\t// On top of the new configuration.\n\t\tif ( nextProps.id !== this.props.id ) {\n\t\t\t/* istanbul ignore else */\n\t\t\tif ( this.contextWatchdog ) {\n\t\t\t\tawait this.contextWatchdog.destroy();\n\t\t\t}\n\n\t\t\tawait this._initializeContextWatchdog( nextProps.config );\n\t\t}\n\n\t\tif ( nextProps.isLayoutReady && !this.contextWatchdog ) {\n\t\t\tawait this._initializeContextWatchdog( nextProps.config );\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Rerender the component only when children has changed.\n\t\treturn this.props.children !== nextProps.children;\n\t}\n\n\tpublic override render(): ReactNode {\n\t\treturn (\n\t\t\t<ContextWatchdogContext.Provider value={ this.contextWatchdog }>\n\t\t\t\t{ this.props.children }\n\t\t\t</ContextWatchdogContext.Provider>\n\t\t);\n\t}\n\n\tpublic override componentWillUnmount(): void {\n\t\tthis._destroyContext();\n\t}\n\n\tprivate async _initializeContextWatchdog( config?: ContextConfig ): Promise<void> {\n\t\t// eslint-disable-next-line new-cap\n\t\tthis.contextWatchdog = new this.props.contextWatchdog( this.props.context!, this.props.watchdogConfig );\n\n\t\tthis.contextWatchdog.on( 'error', ( _, errorEvent ) => {\n\t\t\tthis.props.onError( errorEvent.error, {\n\t\t\t\tphase: 'runtime',\n\t\t\t\twillContextRestart: errorEvent.causesRestart\n\t\t\t} );\n\t\t} );\n\n\t\tthis.contextWatchdog.on( 'stateChange', () => {\n\t\t\tif ( this.contextWatchdog!.state === 'ready' && this.props.onReady ) {\n\t\t\t\tthis.props.onReady( this.contextWatchdog!.context! );\n\t\t\t}\n\t\t} );\n\n\t\tawait this.contextWatchdog.create( config )\n\t\t\t.catch( error => {\n\t\t\t\tthis.props.onError( error, {\n\t\t\t\t\tphase: 'initialization',\n\t\t\t\t\twillContextRestart: false\n\t\t\t\t} );\n\t\t\t} );\n\t}\n\n\tprivate async _destroyContext(): Promise<void> {\n\t\tif ( this.contextWatchdog ) {\n\t\t\tawait this.contextWatchdog.destroy();\n\t\t\tthis.contextWatchdog = null;\n\t\t}\n\t}\n\n\tpublic static defaultProps: Partial<Props<Context>> = {\n\t\tisLayoutReady: true,\n\t\tonError: ( error, details ) => console.error( error, details )\n\t};\n\n\tpublic static propTypes = {\n\t\tid: PropTypes.string,\n\t\tisLayoutReady: PropTypes.bool,\n\t\tcontext: PropTypes.func as unknown as Validator<{ create( ...args: any ): Promise<any> } | undefined>,\n\t\twatchdogConfig: PropTypes.object,\n\t\tconfig: PropTypes.object,\n\t\tonReady: PropTypes.func,\n\t\tonError: PropTypes.func\n\t};\n}\n\ninterface Props<TContext extends Context> extends InferProps<typeof CKEditorContext.propTypes> {\n\tcontext?: { create( ...args: any ): Promise<TContext> };\n\tcontextWatchdog: typeof ContextWatchdog<TContext>;\n\twatchdogConfig?: WatchdogConfig;\n\tconfig?: ContextConfig;\n\tonReady?: ( context: Context ) => void; // TODO this should accept TContext (after ContextWatchdog release).\n\tonError: ( error: Error, details: ErrorDetails ) => void;\n\tchildren?: ReactNode;\n}\n\ninterface ErrorDetails {\n\tphase: 'initialization' | 'runtime';\n\twillContextRestart: boolean;\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { createDefer, type Defer } from '../utils/defer';\nimport { once } from '../utils/once';\n\n/**\n * This class is utilized to pause the initialization of an editor when another instance is already present on a specified element.\n * It is engineered to address the following issues:\n *\n *\t* Rapid changes in component properties often lead to the re-initialization of the editor, which can trigger\n *\t  the `editor-source-element-already-used` exception. This occurs because the editor is still in the process of initializing\n *\t  when the component decides to destroy it. This semaphore waits for the editor to fully initialize before destroying it, thereby\n *\t  allowing a new instance of the editor to be attached to the specified element.\n *\n *\t* Rapid mounting and unmounting in strict mode frequently results in the `editor-source-element-already-used` exception\n *\t  being thrown by the editor. This is due to React reusing the underlying DOM element during the mounting and unmounting of components\n *\t  (especially if the same component is being mounted and unmounted). Consequently, a race condition arises. The first render begins to\n *\t  attach the editor (in async mode), and shortly thereafter, it is destroyed and a new instance of the component is initialized.\n *\t  This semaphore, by utilizing a static semaphores promises map, retains information about whether the element is used by a previous\n *\t  instance of the editor and resumes execution when it is freed.\n *\n *\t* The process involves starting up many editors that are no longer needed and are immediately removed in the following rerenders.\n *\t  This can cause the editor’s initialization performance to slow down. The initialization of the editor is skipped when numerous\n *\t  rerenders occur within a short time-frame while using this semaphore. An example of this could be a situation with 4 rerenders\n *\t  occurring within a 10ms period. This semaphore will likely batch these calls, and instead of initializing 4 editors, only 2 will be\n *\t  initialized (the first and the last one).\n */\nexport class LifeCycleElementSemaphore<R> {\n\t/**\n\t * This is a map of elements associated with promises. It informs the semaphore that the underlying HTML element, used as a key,\n\t * is currently in use by another editor. Each element is assigned a promise, which allows for the easy chaining of new\n\t * editor instances on an element that is already in use by another instance. The process works as follows:\n\t *\n\t * \t1. If an element is being used by an editor, then the initialization of a new editor\n\t * \t   instance is chained using the `.then()` method of the Promise.\n\t *\n\t * \t2. If the editor associated with the underlying element is destroyed, then `Promise.resolve()` is called\n\t * \t   and the previously assigned `.then()` editor callback is executed.\n\t *\n\t *  @see {@link #lock} for more detailed information on the implementation.\n\t */\n\tprivate static readonly _semaphores = new Map<HTMLElement, Promise<void>>();\n\n\t/**\n\t * This should define async methods for initializing and destroying the editor.\n\t * Essentially, it's an async version of basic React lifecycle methods like `componentDidMount`, `componentWillUnmount`.\n\t *\n\t * \t* Result of {@link LifeCycleAsyncOperators#mount} method is passed to {@link LifeCycleAsyncOperators#unmount} as an argument.\n\t */\n\tprivate readonly _lifecycle: LifeCycleAsyncOperators<R>;\n\n\t/**\n\t * This is the element instance that the editor uses for mounting. This element should contain the `ckeditorInstance` member\n\t * once the editor has been successfully mounted to it. The semaphore ensures that a new instance of the editor, which will\n\t * be assigned to this element by the {@link #_lifecycle:mount} method, will always be initialized after the successful\n\t * destruction of the underlying `ckeditorInstance` that was previously mounted on this element.\n\t */\n\tprivate readonly _element: HTMLElement;\n\n\t/**\n\t * This is the lock mechanism utilized by the {@link #lock} and {@link #release} methods.\n\t *\n\t * \t* If the editor is not yet mounted and is awaiting mounting (for instance, when another editor is\n\t * \t  occupying the element), then it is null.\n\t *\n\t * \t* When the editor is mounted on the element, this variable holds an unresolved promise that will be\n\t * \t  resolved after the editor is destroyed.\n\t *\n\t * \t* Once the editor is destroyed (and it was previously mounted), the promise is resolved.\n\t */\n\tprivate _releaseLock: Defer<void> | null = null;\n\n\t/**\n\t * This is the result of the {@link #_lifecycle:mount} function. This value should be reset to `null`\n\t * once the semaphore is released. It is utilized to store certain data that must be removed following\n\t * the destruction of the editor. This data may include the editor's instance, the assigned watchdog,\n\t * or handles for additional window listeners.\n\t */\n\tprivate _value: R | null = null;\n\n\t/**\n\t * This is a list of callbacks that are triggered if the semaphore {@link #_lifecycle:mount} method executes successfully.\n\t * It is utilized in scenarios where we need to assign certain properties to an editor that is currently in the process of mounting.\n\t * An instance of such usage could be two-way binding. We aim to prevent the loss of all `setData` calls if the editor has not\n\t * yet been mounted, therefore these calls will be executed immediately following the completion of the mounting process.\n\t */\n\tprivate _afterMountCallbacks: Array<LifeCycleAfterMountCallback<R>> = [];\n\n\t/**\n\t * This represents the actual mounting state of the semaphore. It is primarily used by the {@link #release} method to\n\t * determine whether the initialization of the editor should be skipped or, if the editor is already initialized, the editor\n\t * should be destroyed.\n\t *\n\t * \t* If `destroyedBeforeInitialization` is true, then the {@link #release} method was invoked before the editor began to mount.\n\t * \t  This often occurs in strict mode when we assign a promise to the {@link LifeCycleEditorElementSemaphore#_semaphores} map\n\t * \t  and the assigned `mount` callback has not yet been called. In this scenario, it is safe to skip the initialization of the editor\n\t * \t  and simply release the semaphore.\n\t *\n\t *\t* If `mountingInProgress` is a Promise, then the {@link #release} method was invoked after the initialization of the editor and\n\t \t  the editor must be destroyed before the semaphore is released.\n\t*/\n\tprivate _state: LifeCycleState<R> = {\n\t\tdestroyedBeforeInitialization: false,\n\t\tmountingInProgress: null\n\t};\n\n\tconstructor( element: HTMLElement, lifecycle: LifeCycleAsyncOperators<R> ) {\n\t\tthis._element = element;\n\t\tthis._lifecycle = lifecycle;\n\t\tthis._lock();\n\t}\n\n\t/**\n\t * Getter for {@link #_value}.\n\t */\n\tpublic get value(): R | null {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * Occasionally, the Watchdog restarts the editor instance, resulting in a new instance being assigned to the semaphore.\n\t * In terms of race conditions, it's generally safer to simply override the semaphore value rather than recreating it\n\t * with a different one.\n\t */\n\tpublic unsafeSetValue( value: R ): void {\n\t\tthis._value = value;\n\n\t\tthis._afterMountCallbacks.forEach( callback => callback( value ) );\n\t\tthis._afterMountCallbacks = [];\n\t}\n\n\t/**\n\t * This registers a callback that will be triggered after the editor has been successfully mounted.\n\t *\n\t * \t* If the editor is already mounted, the callback will be executed immediately.\n\t *\t* If the editor is in the process of mounting, the callback will be executed upon successful mounting.\n\t* \t* If the editor is never mounted, the passed callback will not be executed.\n\t* \t* If an exception is thrown within the callback, it will be re-thrown in the semaphore.\n\t*/\n\tpublic runAfterMount( callback: LifeCycleAfterMountCallback<R> ): void {\n\t\tconst { _value, _afterMountCallbacks } = this;\n\n\t\tif ( _value ) {\n\t\t\tcallback( _value );\n\t\t} else {\n\t\t\t_afterMountCallbacks.push( callback );\n\t\t}\n\t}\n\n\t/**\n\t * This method is used to inform other components that the {@link #_element} will be used by the editor,\n\t * which is initialized by the {@link #_lifecycle} methods.\n\t *\n\t * \t* If an editor is already present on the provided element, the initialization of the current one\n\t * \t  will be postponed until the previous one is destroyed.\n\t *\n\t * \t* If the element is empty and does not have an editor attached to it, the currently locked editor will\n\t * \t  be mounted immediately.\n\t *\n\t * After the successful initialization of the editor and the assignment of the {@link #_value} member,\n\t * the `onReady` lifecycle method is called.\n\t *\n\t * *Important note:*\n\t *\n\t * It’s really important to keep this method *sync*. If we make this method *async*, it won’t work well because\n\t * it will cause problems when we’re trying to set up the {@link LifeCycleEditorElementSemaphore#_semaphores} map entries.\n\t */\n\tprivate _lock(): void {\n\t\tconst { _semaphores } = LifeCycleElementSemaphore;\n\t\tconst { _state, _element, _lifecycle } = this;\n\n\t\t// This promise signifies that the previous editor is still attached to the current element.\n\t\t// Upon successful resolution, it will indicate that it is safe to assume that the element has\n\t\t// no assigned editor instance and can be reinitialized.\n\t\tconst prevElementSemaphore = _semaphores.get( _element ) || Promise.resolve( null );\n\n\t\t// This is a lock that will be resolved after the `release` method is called. Due to this lock,\n\t\t// the promise will never be resolved until the editor is destroyed.\n\t\tconst releaseLock = createDefer();\n\t\tthis._releaseLock = releaseLock;\n\n\t\t// This is the initialization of the editor that occurs after the previous editor has been detached from the specified element.\n\t\t//\n\t\t// If the `release` method was called before the initialization of the current editor instance, then it will be skipped.\n\t\t// This situation occurs quite frequently when we have three or more rerenders in a row, and it doesn't make sense to initialize\n\t\t// the second editor because it will be overridden anyway by the third one.\n\t\tconst newElementSemaphore = prevElementSemaphore\n\t\t\t.then( () => {\n\t\t\t\tif ( _state.destroyedBeforeInitialization ) {\n\t\t\t\t\treturn Promise.resolve( undefined );\n\t\t\t\t}\n\n\t\t\t\t// This variable will be used later in the `release` method to determine\n\t\t\t\t// whether the editor is being destroyed prior to initialization.\n\t\t\t\t_state.mountingInProgress = _lifecycle.mount().then( mountResult => {\n\t\t\t\t\tif ( mountResult ) {\n\t\t\t\t\t\tthis.unsafeSetValue( mountResult );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn mountResult;\n\t\t\t\t} );\n\n\t\t\t\treturn _state.mountingInProgress;\n\t\t\t} )\n\t\t\t.then( async mountResult => {\n\t\t\t\t// Everything is fine, all ready callback might be fired here.\n\t\t\t\tif ( mountResult && _lifecycle.afterMount ) {\n\t\t\t\t\tawait _lifecycle.afterMount( {\n\t\t\t\t\t\telement: _element,\n\t\t\t\t\t\tmountResult\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} )\n\n\t\t\t// It will be released after destroying of editor by the {@link #_release method}.\n\t\t\t.then( () => releaseLock.promise )\n\n\t\t\t// Prevent hanging of semaphore during mount, just assume that everything is fine\n\t\t\t.catch( error => {\n\t\t\t\tconsole.error( 'Semaphore mounting error:', error );\n\t\t\t} )\n\n\t\t\t// Remove semaphore from map if released.\n\t\t\t.then( () => {\n\t\t\t\tif ( _semaphores.get( _element ) === newElementSemaphore ) {\n\t\t\t\t\t_semaphores.delete( _element );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t_semaphores.set( _element, newElementSemaphore );\n\t}\n\n\t/**\n\t * Inverse of {@link #_lock} method that tries to destroy attached editor.\n\t *\n\t * \t* If editor is being already attached to element (or is in attaching process) then after fully initialization of editor\n\t * \t  destroy is performed and semaphore is released. The {@link #_lifecycle} unmount method is called.\n\t *\n\t * \t* If editor is being destroyed before initialization then it does nothing but sets `destroyedBeforeInitialization` flag that\n\t * \t  will be later checked by {@link #_lock} method in initialization. The {@link #_lifecycle} unmount method is not called.\n\t *\n\t * *Important note:*\n\t *\n\t * It’s really important to keep this method *sync*. If we make this method *async*, it won’t work well because\n\t * it will cause problems when we’re trying to set up the {@link LifeCycleEditorElementSemaphore#_semaphores} map entries.\n\t */\n\tpublic readonly release = once( () => {\n\t\tconst { _releaseLock, _state, _element, _lifecycle } = this;\n\n\t\tif ( _state.mountingInProgress ) {\n\t\t\t_state.mountingInProgress\n\t\t\t\t.then( () => _lifecycle.unmount( {\n\t\t\t\t\telement: _element,\n\n\t\t\t\t\t// Mount result might be overridden by watchdog during restart so use instance variable.\n\t\t\t\t\tmountResult: this.value!\n\t\t\t\t} ) )\n\n\t\t\t\t// Prevent hanging of semaphore during unmount, just assume that everything is fine\n\t\t\t\t.catch( error => {\n\t\t\t\t\tconsole.error( 'Semaphore unmounting error:', error );\n\t\t\t\t} )\n\n\t\t\t\t.then( _releaseLock!.resolve )\n\t\t\t\t.then( () => {\n\t\t\t\t\tthis._value = null;\n\t\t\t\t} );\n\t\t} else {\n\t\t\t_state.destroyedBeforeInitialization = true;\n\t\t\t_releaseLock!.resolve();\n\t\t}\n\t} );\n}\n\nexport type LifeCycleAfterMountCallback<R> = ( mountResult: R ) => void;\n\ntype LifeCycleState<R> = {\n\tdestroyedBeforeInitialization: boolean;\n\tmountingInProgress: Promise<R> | null;\n};\n\ntype LifeCyclePostMountAttrs<R> = {\n\telement: HTMLElement;\n\tmountResult: R;\n};\n\ntype LifeCycleAsyncOperators<R> = {\n\tmount: () => Promise<R>;\n\tafterMount?: ( result: LifeCyclePostMountAttrs<R> ) => Promise<void> | void;\n\tunmount: ( result: LifeCyclePostMountAttrs<R> ) => Promise<void>;\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Ensures that passed function will be executed only once.\n */\nexport function once<A extends Array<any>, R = void>( fn: ( ...args: A ) => R ): ( ...args: A ) => R {\n\tlet lastResult: { current: R } | null = null;\n\n\treturn ( ...args: A ): R => {\n\t\tif ( !lastResult ) {\n\t\t\tlastResult = {\n\t\t\t\tcurrent: fn( ...args )\n\t\t\t};\n\t\t}\n\n\t\treturn lastResult.current;\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nexport type Defer<E> = {\n\tpromise: Promise<E>;\n\tresolve: ( value: E ) => void;\n};\n\n/**\n * This function generates a promise that can be resolved by invoking the returned `resolve` method.\n * It proves to be beneficial in the creation of various types of locks and semaphores.\n */\nexport function createDefer<E = void>(): Defer<E> {\n\tconst deferred: Defer<E> = {\n\t\tresolve: null as any,\n\t\tpromise: null as any\n\t};\n\n\tdeferred.promise = new Promise<E>( resolve => {\n\t\tdeferred.resolve = resolve;\n\t} );\n\n\treturn deferred;\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/* globals window */\n\nimport React from 'react';\nimport PropTypes, { type InferProps, type Validator } from 'prop-types';\nimport type {\n\tEventInfo,\n\tEditor,\n\tEditorConfig,\n\tDocumentChangeEvent,\n\tEditorWatchdog,\n\tContextWatchdog,\n\tWatchdogConfig,\n\tEditorCreatorFunction\n} from 'ckeditor5';\n\nimport { uid } from './utils/uid';\nimport { ContextWatchdogContext } from './ckeditorcontext';\nimport { LifeCycleElementSemaphore } from './lifecycle/LifeCycleElementSemaphore';\nimport type { EditorSemaphoreMountResult } from './lifecycle/LifeCycleEditorSemaphore';\n\nconst REACT_INTEGRATION_READ_ONLY_LOCK_ID = 'Lock from React integration (@ckeditor/ckeditor5-react)';\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport default class CKEditor<TEditor extends Editor> extends React.Component<Props<TEditor>> {\n\t/**\n\t * After mounting the editor, the variable will contain a reference to the created editor.\n\t * @see: https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html\n\t */\n\tprivate domContainer = React.createRef<HTMLDivElement>();\n\n\t/**\n\t * Unlocks element in editor semaphore after destroy editor instance.\n\t */\n\tprivate editorSemaphore: LifeCycleElementSemaphore<EditorSemaphoreMountResult<TEditor>> | null = null;\n\n\tconstructor( props: Props<TEditor> ) {\n\t\tsuper( props );\n\n\t\tthis._checkVersion();\n\t}\n\n\t/**\n\t * Checks if the CKEditor version used in the application is compatible with the component.\n\t */\n\tprivate _checkVersion(): void {\n\t\tconst { CKEDITOR_VERSION } = window;\n\n\t\tif ( !CKEDITOR_VERSION ) {\n\t\t\treturn console.warn( 'Cannot find the \"CKEDITOR_VERSION\" in the \"window\" scope.' );\n\t\t}\n\n\t\tconst [ major ] = CKEDITOR_VERSION.split( '.' ).map( Number );\n\n\t\tif ( major >= 42 || CKEDITOR_VERSION.startsWith( '0.0.0' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.warn( 'The <CKEditor> component requires using CKEditor 5 in version 42+ or nightly build.' );\n\t}\n\n\tprivate get _semaphoreValue(): EditorSemaphoreMountResult<TEditor> | null {\n\t\tconst { editorSemaphore } = this;\n\n\t\treturn editorSemaphore ? editorSemaphore.value : null;\n\t}\n\n\t/**\n\t * An watchdog instance.\n\t */\n\tpublic get watchdog(): EditorWatchdog<TEditor> | EditorWatchdogAdapter<TEditor> | null {\n\t\tconst { _semaphoreValue } = this;\n\n\t\treturn _semaphoreValue ? _semaphoreValue.watchdog : null;\n\t}\n\n\t/**\n\t * An editor instance.\n\t */\n\tpublic get editor(): Editor | null {\n\t\tconst { _semaphoreValue } = this;\n\n\t\treturn _semaphoreValue ? _semaphoreValue.instance : null;\n\t}\n\n\t/**\n\t * The CKEditor component should not be updated by React itself.\n\t * However, if the component identifier changes, the whole structure should be created once again.\n\t */\n\tpublic override shouldComponentUpdate( nextProps: Readonly<Props<TEditor>> ): boolean {\n\t\tconst { props, editorSemaphore } = this;\n\n\t\t// Only when the component identifier changes the whole structure should be re-created once again.\n\t\tif ( nextProps.id !== props.id ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( nextProps.disableWatchdog !== props.disableWatchdog ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( editorSemaphore ) {\n\t\t\teditorSemaphore.runAfterMount( ( { instance } ) => {\n\t\t\t\tif ( this._shouldUpdateEditorData( props, nextProps, instance ) ) {\n\t\t\t\t\tinstance.data.set( nextProps.data! );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( 'disabled' in nextProps ) {\n\t\t\t\teditorSemaphore.runAfterMount( ( { instance } ) => {\n\t\t\t\t\tif ( nextProps.disabled ) {\n\t\t\t\t\t\tinstance.enableReadOnlyMode( REACT_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinstance.disableReadOnlyMode( REACT_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Initialize the editor when the component is mounted.\n\t */\n\tpublic override componentDidMount(): void {\n\t\tthis._initLifeCycleSemaphore();\n\t}\n\n\t/**\n\t * Re-render the entire component once again. The old editor will be destroyed and the new one will be created.\n\t */\n\tpublic override componentDidUpdate(): void {\n\t\tthis._initLifeCycleSemaphore();\n\t}\n\n\t/**\n\t * Destroy the editor before unmounting the component.\n\t */\n\tpublic override componentWillUnmount(): void {\n\t\tthis._unlockLifeCycleSemaphore();\n\t}\n\n\t/**\n\t * Async destroy attached editor and unlock element semaphore.\n\t */\n\tprivate _unlockLifeCycleSemaphore() {\n\t\tif ( this.editorSemaphore ) {\n\t\t\tthis.editorSemaphore.release();\n\t\t\tthis.editorSemaphore = null;\n\t\t}\n\t}\n\n\t/**\n\t * Unlocks previous editor semaphore and creates new one..\n\t */\n\tprivate _initLifeCycleSemaphore() {\n\t\tthis._unlockLifeCycleSemaphore();\n\t\tthis.editorSemaphore = new LifeCycleElementSemaphore( this.domContainer.current!, {\n\t\t\tmount: async () => this._initializeEditor(),\n\t\t\tafterMount: ( { mountResult } ) => {\n\t\t\t\tconst { onReady } = this.props;\n\n\t\t\t\tif ( onReady && this.domContainer.current !== null ) {\n\t\t\t\t\tonReady( mountResult.instance );\n\t\t\t\t}\n\t\t\t},\n\t\t\tunmount: async ( { element, mountResult } ) => {\n\t\t\t\tconst { onAfterDestroy } = this.props;\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this._destroyEditor( mountResult );\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Make sure that nothing left in actual editor element. There can be custom integrations that\n\t\t\t\t\t * appends something to container. Let's reset element every update cycle before mounting another\n\t\t\t\t\t * editor instance.\n\t\t\t\t\t */\n\t\t\t\t\telement.innerHTML = '';\n\t\t\t\t} finally {\n\t\t\t\t\t/**\n\t\t\t\t\t * Broadcast information about destroying current instance. It is useful for removing duplicated\n\t\t\t\t\t * toolbars in decoupled editor mode.\n\t\t\t\t\t */\n\t\t\t\t\tif ( onAfterDestroy ) {\n\t\t\t\t\t\tonAfterDestroy( mountResult.instance );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Render a <div> element which will be replaced by CKEditor.\n\t */\n\tpublic override render(): React.ReactNode {\n\t\treturn (\n\t\t\t<div ref={ this.domContainer }></div>\n\t\t);\n\t}\n\n\t/**\n\t * Initializes the editor by creating a proper watchdog and initializing it with the editor's configuration.\n\t */\n\tprivate async _initializeEditor(): Promise<EditorSemaphoreMountResult<TEditor>> {\n\t\tif ( this.props.disableWatchdog ) {\n\t\t\tconst instance = await this._createEditor( this.domContainer.current!, this._getConfig() );\n\n\t\t\treturn {\n\t\t\t\tinstance: instance as TEditor,\n\t\t\t\twatchdog: null\n\t\t\t};\n\t\t}\n\n\t\tconst watchdog = ( () => {\n\t\t\tif ( this.context instanceof this.props.editor.ContextWatchdog ) {\n\t\t\t\treturn new EditorWatchdogAdapter( this.context );\n\t\t\t}\n\n\t\t\treturn new this.props.editor.EditorWatchdog( this.props.editor, this.props.watchdogConfig );\n\t\t} )() as EditorWatchdogAdapter<TEditor>;\n\n\t\tconst totalRestartsRef = {\n\t\t\tcurrent: 0\n\t\t};\n\n\t\twatchdog.setCreator( async ( el, config ) => {\n\t\t\tconst { editorSemaphore } = this;\n\t\t\tconst { onAfterDestroy } = this.props;\n\n\t\t\tif ( totalRestartsRef.current > 0 &&\n\t\t\t\t\tonAfterDestroy &&\n\t\t\t\t\teditorSemaphore &&\n\t\t\t\t\teditorSemaphore.value &&\n\t\t\t\t\teditorSemaphore.value.instance ) {\n\t\t\t\tonAfterDestroy( editorSemaphore.value.instance );\n\t\t\t}\n\n\t\t\tconst instance = await this._createEditor( el as any, config );\n\n\t\t\tif ( totalRestartsRef.current > 0 ) {\n\t\t\t\teditorSemaphore!.unsafeSetValue( {\n\t\t\t\t\tinstance,\n\t\t\t\t\twatchdog\n\t\t\t\t} );\n\n\t\t\t\tsetTimeout( () => {\n\t\t\t\t\tif ( this.props.onReady ) {\n\t\t\t\t\t\tthis.props.onReady( watchdog!.editor as TEditor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\ttotalRestartsRef.current++;\n\t\t\treturn instance;\n\t\t} );\n\n\t\twatchdog.on( 'error', ( _, { error, causesRestart } ) => {\n\t\t\tconst onError = this.props.onError || console.error;\n\t\t\tonError( error, { phase: 'runtime', willEditorRestart: causesRestart } );\n\t\t} );\n\n\t\tawait watchdog\n\t\t\t.create( this.domContainer.current!, this._getConfig() )\n\t\t\t.catch( error => {\n\t\t\t\tconst onError = this.props.onError || console.error;\n\t\t\t\tonError( error, { phase: 'initialization', willEditorRestart: false } );\n\t\t\t} );\n\n\t\treturn {\n\t\t\twatchdog,\n\t\t\tinstance: watchdog!.editor\n\t\t};\n\t}\n\n\t/**\n\t * Creates an editor from the element and configuration.\n\t *\n\t * @param element The source element.\n\t * @param config CKEditor 5 editor configuration.\n\t */\n\tprivate _createEditor( element: HTMLElement | string | Record<string, string>, config: EditorConfig ): Promise<TEditor> {\n\t\treturn this.props.editor.create( element as HTMLElement, config )\n\t\t\t.then( editor => {\n\t\t\t\tif ( 'disabled' in this.props ) {\n\t\t\t\t\t// Switch to the read-only mode if the `[disabled]` attribute is specified.\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif ( this.props.disabled ) {\n\t\t\t\t\t\teditor.enableReadOnlyMode( REACT_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst modelDocument = editor.model.document;\n\t\t\t\tconst viewDocument = editor.editing.view.document;\n\n\t\t\t\tmodelDocument.on<DocumentChangeEvent>( 'change:data', event => {\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif ( this.props.onChange ) {\n\t\t\t\t\t\tthis.props.onChange( event, editor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tviewDocument.on( 'focus', event => {\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif ( this.props.onFocus ) {\n\t\t\t\t\t\tthis.props.onFocus( event, editor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tviewDocument.on( 'blur', event => {\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif ( this.props.onBlur ) {\n\t\t\t\t\t\tthis.props.onBlur( event, editor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\treturn editor;\n\t\t\t} );\n\t}\n\n\t/**\n\t * Destroys the editor by destroying the watchdog.\n\t */\n\tprivate async _destroyEditor( initializeResult: EditorSemaphoreMountResult<Editor> ): Promise<void> {\n\t\tconst { watchdog, instance } = initializeResult;\n\n\t\treturn new Promise<void>( ( resolve, reject ) => {\n\t\t\t// It may happen during the tests that the watchdog instance is not assigned before destroying itself. See: #197.\n\t\t\t//\n\t\t\t// Additionally, we need to find a way to detect if the whole context has been destroyed. As `componentWillUnmount()`\n\t\t\t// could be fired by <CKEditorContext /> and <CKEditor /> at the same time, this `setTimeout()` makes sure\n\t\t\t// that <CKEditorContext /> component will be destroyed first, so during the code execution\n\t\t\t// the `ContextWatchdog#state` would have a correct value. See `EditorWatchdogAdapter#destroy()` for more information.\n\t\t\t/* istanbul ignore next */\n\t\t\tsetTimeout( async () => {\n\t\t\t\ttry {\n\t\t\t\t\tif ( watchdog ) {\n\t\t\t\t\t\tawait watchdog.destroy();\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( instance ) {\n\t\t\t\t\t\tawait instance.destroy();\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve();\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\tconsole.error( e );\n\t\t\t\t\treject( e );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Returns true when the editor should be updated.\n\t *\n\t * @param prevProps Previous react's properties.\n\t * @param nextProps React's properties.\n\t * @param editor Current editor instance.\n\t */\n\tprivate _shouldUpdateEditorData( prevProps: Readonly<Props<TEditor>>, nextProps: Readonly<Props<TEditor>>, editor: TEditor ): boolean {\n\t\t// Check whether `nextProps.data` is equal to `this.props.data` is required if somebody defined the `#data`\n\t\t// property as a static string and updated a state of component when the editor's content has been changed.\n\t\t// If we avoid checking those properties, the editor's content will back to the initial value because\n\t\t// the state has been changed and React will call this method.\n\t\tif ( prevProps.data === nextProps.data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// We should not change data if the editor's content is equal to the `#data` property.\n\t\tif ( editor.data.get() === nextProps.data ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the editor configuration.\n\t */\n\tprivate _getConfig(): EditorConfig {\n\t\tconst config = this.props.config || {};\n\n\t\tif ( this.props.data && config.initialData ) {\n\t\t\tconsole.warn(\n\t\t\t\t'Editor data should be provided either using `config.initialData` or `content` property. ' +\n\t\t\t\t'The config value takes precedence over `content` property and will be used when both are specified.'\n\t\t\t);\n\t\t}\n\n\t\t// Merge two possible ways of providing data into the `config.initialData` field.\n\t\treturn {\n\t\t\t...config,\n\t\t\tinitialData: config.initialData || this.props.data || ''\n\t\t};\n\t}\n\n\tpublic static override contextType = ContextWatchdogContext;\n\n\t// Properties definition.\n\tpublic static propTypes = {\n\t\teditor: PropTypes.func.isRequired as unknown as Validator<{ create( ...args: any ): Promise<any> }>,\n\t\tdata: PropTypes.string,\n\t\tconfig: PropTypes.object,\n\t\tdisableWatchdog: PropTypes.bool,\n\t\twatchdogConfig: PropTypes.object,\n\t\tonChange: PropTypes.func,\n\t\tonReady: PropTypes.func,\n\t\tonFocus: PropTypes.func,\n\t\tonBlur: PropTypes.func,\n\t\tonError: PropTypes.func,\n\t\tdisabled: PropTypes.bool,\n\t\tid: PropTypes.any\n\t};\n}\n\n/**\n * TODO this is type space definition for props, the CKEditor.propTypes is a run-time props validation that should match.\n */\ninterface Props<TEditor extends Editor> extends InferProps<typeof CKEditor.propTypes> {\n\teditor: {\n\t\tcreate( ...args: any ): Promise<TEditor>;\n\t\tEditorWatchdog: typeof EditorWatchdog;\n\t\tContextWatchdog: typeof ContextWatchdog;\n\t};\n\tconfig?: EditorConfig;\n\twatchdogConfig?: WatchdogConfig;\n\tdisableWatchdog?: boolean;\n\tonReady?: ( editor: TEditor ) => void;\n\tonAfterDestroy?: ( editor: TEditor ) => void;\n\tonError?: ( error: Error, details: ErrorDetails ) => void;\n\tonChange?: ( event: EventInfo, editor: TEditor ) => void;\n\tonFocus?: ( event: EventInfo, editor: TEditor ) => void;\n\tonBlur?: ( event: EventInfo, editor: TEditor ) => void;\n}\n\ninterface ErrorDetails {\n\tphase: 'initialization' | 'runtime';\n\twillEditorRestart?: boolean;\n}\n\n/**\n * An adapter aligning the context watchdog API to the editor watchdog API for easier usage.\n */\nexport class EditorWatchdogAdapter<TEditor extends Editor> {\n\t/**\n\t * The context watchdog instance that will be wrapped into editor watchdog API.\n\t */\n\tprivate readonly _contextWatchdog: ContextWatchdog;\n\n\t/**\n\t * A unique id for the adapter to distinguish editor items when using the context watchdog API.\n\t */\n\tprivate readonly _id: string;\n\n\t/**\n\t * A watchdog's editor creator function.\n\t */\n\tprivate _creator?: EditorCreatorFunction;\n\n\t/**\n\t * @param contextWatchdog The context watchdog instance that will be wrapped into editor watchdog API.\n\t */\n\tconstructor( contextWatchdog: ContextWatchdog ) {\n\t\tthis._contextWatchdog = contextWatchdog;\n\t\tthis._id = uid();\n\t}\n\n\t/**\n\t *  @param creator A watchdog's editor creator function.\n\t */\n\tpublic setCreator( creator: EditorCreatorFunction ): void {\n\t\tthis._creator = creator;\n\t}\n\n\t/**\n\t * Adds an editor configuration to the context watchdog registry. Creates an instance of it.\n\t *\n\t * @param sourceElementOrData A source element or data for the new editor.\n\t * @param config CKEditor 5 editor config.\n\t */\n\tpublic create( sourceElementOrData: HTMLElement | string, config: EditorConfig ): Promise<unknown> {\n\t\treturn this._contextWatchdog.add( {\n\t\t\tsourceElementOrData,\n\t\t\tconfig,\n\t\t\tcreator: this._creator!,\n\t\t\tid: this._id,\n\t\t\ttype: 'editor'\n\t\t} );\n\t}\n\n\t/**\n\t * Creates a listener that is attached to context watchdog's item and run when the context watchdog fires.\n\t * Currently works only for the `error` event.\n\t */\n\tpublic on( _: string, callback: ( _: null, data: { error: Error; causesRestart?: boolean } ) => void ): void {\n\t\t// Assume that the event name was error.\n\t\tthis._contextWatchdog.on( 'itemError', ( _, { itemId, error } ) => {\n\t\t\tif ( itemId === this._id ) {\n\t\t\t\tcallback( null, { error, causesRestart: undefined } );\n\t\t\t}\n\t\t} );\n\t}\n\n\tpublic destroy(): Promise<unknown> {\n\t\t// Destroying an editor instance after destroying the Context is handled in the `ContextWatchdog` class.\n\t\t// As `EditorWatchdogAdapter` is an adapter, we should not destroy the editor manually.\n\t\t// Otherwise, it causes that the editor is destroyed twice. However, there is a case, when the editor\n\t\t// needs to be removed from the context, without destroying the context itself. We may assume the following\n\t\t// relations with `ContextWatchdog#state`:\n\t\t//\n\t\t// a) `ContextWatchdog#state` === 'ready' - context is not destroyed; it's safe to destroy the editor manually.\n\t\t// b) `ContextWatchdog#state` === 'destroyed' - context is destroyed; let `ContextWatchdog` handle the whole process.\n\t\t//\n\t\t// See #354 for more information.\n\t\tif ( this._contextWatchdog.state === 'ready' ) {\n\t\t\treturn this._contextWatchdog.remove( this._id );\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * An editor instance.\n\t */\n\tpublic get editor(): TEditor {\n\t\treturn this._contextWatchdog.getItem( this._id ) as TEditor;\n\t}\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport type { MutableRefObject } from 'react';\n\ntype CallbackRef<T> = ( element: T ) => void;\n\ntype ReactRef<T> = CallbackRef<T | null> | MutableRefObject<T | null> | null;\n\n/**\n * Combine multiple react refs into one.\n */\nexport function mergeRefs<T>( ...refs: Array<ReactRef<T>> ): CallbackRef<T> {\n\treturn value => {\n\t\trefs.forEach( ref => {\n\t\t\tif ( typeof ref === 'function' ) {\n\t\t\t\tref( value );\n\t\t\t} else if ( ref != null ) {\n\t\t\t\tref.current = value;\n\t\t\t}\n\t\t} );\n\t};\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Clears whole object while keeping its reference.\n */\nexport function overwriteObject<O extends Record<string, any>>( source: O, destination: O ): O {\n\tfor ( const prop of Object.getOwnPropertyNames( destination ) ) {\n\t\tdelete destination[ prop ];\n\t}\n\n\t// Prevent assigning self referencing attributes which crashes `Object.assign`.\n\tfor ( const [ key, value ] of Object.entries( source ) ) {\n\t\tif ( value !== destination && key !== 'prototype' && key !== '__proto__' ) {\n\t\t\t( destination as any )[ key ] = value;\n\t\t}\n\t}\n\n\treturn destination;\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { useCallback, useRef } from 'react';\n\n/**\n * Hook that guarantees that returns constant reference for passed function.\n * Useful for preventing closures from capturing cached scope variables (avoiding the stale closure problem).\n */\nexport const useRefSafeCallback = <A extends Array<unknown>, R>( fn: ( ...args: A ) => R ): typeof fn => {\n\tconst callbackRef = useRef<typeof fn>();\n\tcallbackRef.current = fn;\n\n\treturn useCallback(\n\t\t( ...args: A ): R => ( callbackRef.current as typeof fn )( ...args ),\n\t\t[]\n\t);\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Clear whole array while keeping its reference.\n */\nexport function overwriteArray<A extends Array<any>>( source: A, destination: A ): A {\n\tdestination.length = 0;\n\tdestination.push( ...source );\n\n\treturn destination;\n}\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Shallow comparison of two arrays.\n */\nexport const shallowCompareArrays = <T>(\n\ta: Readonly<Array<T>>,\n\tb: Readonly<Array<T>>\n): boolean => {\n\tif ( a === b ) {\n\t\treturn true;\n\t}\n\n\tif ( !a || !b ) {\n\t\treturn false;\n\t}\n\n\tfor ( let i = 0; i < a.length; ++i ) {\n\t\tif ( a[ i ] !== b[ i ] ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport type { DependencyList } from 'react';\nimport type { LifeCycleElementSemaphore } from '../lifecycle/LifeCycleElementSemaphore';\nimport { useInstantEffect } from './useInstantEffect';\n\n/**\n * `useEffect` alternative but executed after mounting of editor.\n */\nexport const useInstantEditorEffect = <R>(\n\tsemaphore: LifeCycleElementSemaphore<R> | null,\n\tfn: ( mountResult: R ) => void,\n\tdeps: DependencyList\n): void => {\n\tuseInstantEffect( () => {\n\t\tif ( semaphore ) {\n\t\t\tsemaphore.runAfterMount( fn );\n\t\t}\n\t}, [ semaphore, ...deps ] );\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { useRef, type DependencyList } from 'react';\nimport { shallowCompareArrays } from '../utils/shallowCompareArrays';\n\n/**\n * Triggers an effect immediately if the dependencies change (during rendering of component).\n *\n * @param fn The effect function to execute.\n * @param deps The dependency list.\n */\nexport const useInstantEffect = ( fn: VoidFunction, deps: DependencyList ): void => {\n\tconst prevDeps = useRef<any>( null );\n\n\tif ( !shallowCompareArrays( prevDeps.current, deps ) ) {\n\t\tprevDeps.current = [ ...deps ];\n\t\tfn();\n\t}\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport React, {\n\tforwardRef, useState, useEffect, useRef, useContext, useCallback, memo,\n\ttype Dispatch, type SetStateAction, type RefObject\n} from 'react';\n\nimport type {\n\tInlineEditableUIView,\n\tEditorConfig,\n\tDocumentChangeEvent,\n\tWriter,\n\tRootElement,\n\tContextWatchdog,\n\tEditorWatchdog,\n\tWatchdogConfig,\n\tAddRootEvent,\n\tDetachRootEvent,\n\tMultiRootEditor,\n\tEventInfo\n} from 'ckeditor5';\n\nimport { ContextWatchdogContext } from './ckeditorcontext';\nimport { EditorWatchdogAdapter } from './ckeditor';\n\nimport type { EditorSemaphoreMountResult } from './lifecycle/LifeCycleEditorSemaphore';\n\nimport { useLifeCycleSemaphoreSyncRef, type LifeCycleSemaphoreSyncRefResult } from './lifecycle/useLifeCycleSemaphoreSyncRef';\nimport { mergeRefs } from './utils/mergeRefs';\nimport { LifeCycleElementSemaphore } from './lifecycle/LifeCycleElementSemaphore';\nimport { overwriteObject } from './utils/overwriteObject';\nimport { useRefSafeCallback } from './hooks/useRefSafeCallback';\nimport { uniq } from './utils/uniq';\nimport { overwriteArray } from './utils/overwriteArray';\nimport { useInstantEditorEffect } from './hooks/useInstantEditorEffect';\n\nconst REACT_INTEGRATION_READ_ONLY_LOCK_ID = 'Lock from React integration (@ckeditor/ckeditor5-react)';\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\nconst useMultiRootEditor = ( props: MultiRootHookProps ): MultiRootHookReturns => {\n\tconst semaphoreElementRef = useRef<HTMLElement>( props.semaphoreElement || null );\n\tconst semaphore = useLifeCycleSemaphoreSyncRef<LifeCycleMountResult>();\n\n\tconst editorRefs: LifeCycleSemaphoreRefs<MultiRootEditor> = {\n\t\twatchdog: semaphore.createAttributeRef( 'watchdog' ),\n\t\tinstance: semaphore.createAttributeRef( 'instance' )\n\t};\n\n\tconst context = useContext( ContextWatchdogContext );\n\n\t// List of editor root elements.\n\tconst [ roots, setRoots ] = useState<Array<string>>( () => Object.keys( props.data ) );\n\n\t// Current editor data. An object where each key is a root name and the value is the root content.\n\tconst [ data, setData ] = useState<Record<string, string>>( { ...props.data } );\n\n\t// Current roots attributes. An object where each key is a root name and the value is an object with root attributes.\n\tconst [ attributes, setAttributes ] = useState<Record<string, Record<string, unknown>>>( { ...props.rootsAttributes } );\n\n\tconst shouldUpdateEditor = useRef<boolean>( true );\n\n\tuseEffect( () => {\n\t\tconst semaphoreElement = semaphoreElementRef.current;\n\n\t\tif ( !semaphoreElement || props.isLayoutReady === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\tsemaphore.replace( () => new LifeCycleElementSemaphore( semaphoreElement, {\n\t\t\tmount: _initializeEditor,\n\t\t\tafterMount: ( { mountResult } ) => {\n\t\t\t\tconst { onReady } = props;\n\n\t\t\t\tif ( onReady && semaphoreElementRef.current !== null ) {\n\t\t\t\t\tonReady( mountResult.instance );\n\t\t\t\t}\n\t\t\t},\n\t\t\tunmount: async ( { element, mountResult } ) => {\n\t\t\t\tconst { onAfterDestroy } = props;\n\n\t\t\t\ttry {\n\t\t\t\t\tawait _destroyEditor( mountResult );\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Make sure that nothing left in actual editor element. There can be custom integrations that\n\t\t\t\t\t * appends something to container. Let's reset element every update cycle before mounting another\n\t\t\t\t\t * editor instance.\n\t\t\t\t\t */\n\t\t\t\t\telement.innerHTML = '';\n\t\t\t\t} finally {\n\t\t\t\t\t/**\n\t\t\t\t\t * Broadcast information about destroying current instance. It is useful for removing duplicated\n\t\t\t\t\t * toolbars in decoupled editor mode.\n\t\t\t\t\t */\n\t\t\t\t\tif ( onAfterDestroy ) {\n\t\t\t\t\t\tonAfterDestroy( mountResult.instance );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} ) );\n\n\t\treturn () => {\n\t\t\tsemaphore.release( false );\n\t\t};\n\t}, [ props.id, props.isLayoutReady ] );\n\n\t/**\n\t * Returns the editor configuration.\n\t */\n\tconst _getConfig = (): EditorConfig => {\n\t\tconst config = props.config || {};\n\n\t\tif ( props.data && config.initialData ) {\n\t\t\tconsole.warn(\n\t\t\t\t'Editor data should be provided either using `config.initialData` or `data` property. ' +\n\t\t\t\t'The config value takes precedence over `data` property and will be used when both are specified.'\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\t...config,\n\t\t\trootsAttributes: attributes\n\t\t};\n\t};\n\n\t/**\n\t * Callback function for handling changed data and attributes in the editor.\n\t */\n\tconst onChangeData = useRefSafeCallback( ( editor: MultiRootEditor, event: EventInfo ): void => {\n\t\tconst modelDocument = editor!.model.document;\n\n\t\tif ( !props.disableTwoWayDataBinding ) {\n\t\t\tconst newData: Record<string, string> = {};\n\t\t\tconst newAttributes: Record<string, Record<string, unknown>> = {};\n\n\t\t\tmodelDocument.differ.getChanges()\n\t\t\t\t.forEach( change => {\n\t\t\t\t\tlet root: RootElement;\n\n\t\t\t\t\tif ( change.type == 'insert' || change.type == 'remove' ) {\n\t\t\t\t\t\troot = change.position.root as RootElement;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Must be `attribute` diff item.\n\t\t\t\t\t\troot = change.range.root as RootElement;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Getting data from a not attached root will trigger a warning.\n\t\t\t\t\t// There is another callback for handling detached roots.\n\t\t\t\t\tif ( !root.isAttached() ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { rootName } = root;\n\n\t\t\t\t\tnewData[ rootName ] = editor!.getData( { rootName } );\n\t\t\t\t} );\n\n\t\t\tmodelDocument.differ.getChangedRoots()\n\t\t\t\t.forEach( changedRoot => {\n\t\t\t\t\t// Ignore added and removed roots. They are handled by a different function.\n\t\t\t\t\t// Only register if roots attributes changed.\n\t\t\t\t\tif ( changedRoot.state ) {\n\t\t\t\t\t\tif ( newData[ changedRoot.name ] !== undefined ) {\n\t\t\t\t\t\t\tdelete newData[ changedRoot.name ];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rootName = changedRoot.name;\n\n\t\t\t\t\tnewAttributes[ rootName ] = editor!.getRootAttributes( rootName );\n\t\t\t\t} );\n\n\t\t\tif ( Object.keys( newData ).length ) {\n\t\t\t\tsetData( previousData => ( { ...previousData, ...newData } ) );\n\t\t\t}\n\n\t\t\tif ( Object.keys( newAttributes ).length ) {\n\t\t\t\tsetAttributes( previousAttributes => ( { ...previousAttributes, ...newAttributes } ) );\n\t\t\t}\n\t\t}\n\n\t\t/* istanbul ignore else */\n\t\tif ( props.onChange ) {\n\t\t\tprops.onChange( event, editor! );\n\t\t}\n\t} );\n\n\t/**\n\t * Callback function for handling an added root.\n\t */\n\tconst onAddRoot = useRefSafeCallback( ( editor: MultiRootEditor, evt: EventInfo, root: RootElement ): void => {\n\t\tconst rootName = root.rootName;\n\n\t\tif ( !props.disableTwoWayDataBinding ) {\n\t\t\tsetData( previousData =>\n\t\t\t\t( { ...previousData, [ rootName ]: editor!.getData( { rootName } ) } )\n\t\t\t);\n\n\t\t\tsetAttributes( previousAttributes =>\n\t\t\t\t( { ...previousAttributes, [ rootName ]: editor!.getRootAttributes( rootName ) } )\n\t\t\t);\n\t\t}\n\n\t\tsetRoots( prevRoots => uniq( [ ...prevRoots, root.rootName ] ) );\n\t} );\n\n\t/**\n\t * Callback function for handling a detached root.\n\t */\n\tconst onDetachRoot = useRefSafeCallback( ( editor: MultiRootEditor, evt: EventInfo, root: RootElement ): void => {\n\t\tconst rootName = root.rootName;\n\n\t\tif ( !props.disableTwoWayDataBinding ) {\n\t\t\tsetData( previousData => {\n\t\t\t\tconst { [ rootName! ]: _, ...newData } = previousData;\n\n\t\t\t\treturn { ...newData };\n\t\t\t} );\n\n\t\t\tsetAttributes( previousAttributes => {\n\t\t\t\tconst { [ rootName! ]: _, ...newAttributes } = previousAttributes;\n\n\t\t\t\treturn { ...newAttributes };\n\t\t\t} );\n\t\t}\n\n\t\tsetRoots( prevRoots => prevRoots.filter( root => root !== rootName ) );\n\t} );\n\n\t/**\n\t * Creates an editor using initial elements or data, and configuration.\n\t *\n\t * @param initialData The initial data.\n\t * @param config CKEditor 5 editor configuration.\n\t */\n\tconst _createEditor = useRefSafeCallback( (\n\t\tinitialData: Record<string, string> | Record<string, HTMLElement>,\n\t\tconfig: EditorConfig\n\t): Promise<MultiRootEditor> => {\n\t\toverwriteObject( { ...props.rootsAttributes }, attributes );\n\t\toverwriteObject( { ...props.data }, data );\n\t\toverwriteArray( Object.keys( props.data ), roots );\n\n\t\treturn props.editor.create( initialData, config )\n\t\t\t.then( ( editor: MultiRootEditor ) => {\n\t\t\t\tconst editorData = editor.getFullData();\n\n\t\t\t\t// Rerender will be called anyway.\n\t\t\t\toverwriteObject( { ...editorData }, data );\n\t\t\t\toverwriteObject( { ...editor.getRootsAttributes() }, attributes );\n\t\t\t\toverwriteArray( Object.keys( editorData ), roots );\n\n\t\t\t\tif ( props.disabled ) {\n\t\t\t\t\t// Switch to the read-only mode if the `[disabled]` attribute is specified.\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\teditor.enableReadOnlyMode( REACT_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t\t\t}\n\n\t\t\t\tconst modelDocument = editor.model.document;\n\t\t\t\tconst viewDocument = editor.editing.view.document;\n\n\t\t\t\tmodelDocument.on<DocumentChangeEvent>( 'change:data', evt => onChangeData( editor, evt ) );\n\n\t\t\t\teditor.on<AddRootEvent>( 'addRoot', ( evt, root ) => onAddRoot( editor, evt, root ) );\n\t\t\t\teditor.on<DetachRootEvent>( 'detachRoot', ( evt, root ) => onDetachRoot( editor, evt, root ) );\n\n\t\t\t\tviewDocument.on( 'focus', event => {\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif ( props.onFocus ) {\n\t\t\t\t\t\tprops.onFocus( event, editor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tviewDocument.on( 'blur', event => {\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif ( props.onBlur ) {\n\t\t\t\t\t\tprops.onBlur( event, editor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\treturn editor;\n\t\t\t} );\n\t} );\n\n\t/**\n\t * Destroys the editor by destroying the watchdog.\n\t */\n\tconst _destroyEditor = ( initializeResult: EditorSemaphoreMountResult<MultiRootEditor> ): Promise<void> => {\n\t\tconst { watchdog, instance } = initializeResult;\n\n\t\treturn new Promise<void>( ( resolve, reject ) => {\n\t\t\t// It may happen during the tests that the watchdog instance is not assigned before destroying itself. See: #197.\n\t\t\t//\n\t\t\t// Additionally, we need to find a way to detect if the whole context has been destroyed. As `componentWillUnmount()`\n\t\t\t// could be fired by <CKEditorContext /> and <CKEditor /> at the same time, this `setTimeout()` makes sure\n\t\t\t// that <CKEditorContext /> component will be destroyed first, so during the code execution\n\t\t\t// the `ContextWatchdog#state` would have a correct value. See `EditorWatchdogAdapter#destroy()` for more information.\n\t\t\t/* istanbul ignore next */\n\t\t\tsetTimeout( async () => {\n\t\t\t\ttry {\n\t\t\t\t\tif ( watchdog ) {\n\t\t\t\t\t\tawait watchdog.destroy();\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( instance ) {\n\t\t\t\t\t\tawait instance.destroy();\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve();\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\tconsole.error( e );\n\t\t\t\t\treject( e );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t};\n\n\t/**\n\t * Initializes the editor by creating a proper watchdog and initializing it with the editor's configuration.\n\t */\n\tconst _initializeEditor = async (): Promise<LifeCycleMountResult> => {\n\t\tif ( props.disableWatchdog ) {\n\t\t\tconst instance = await _createEditor( props.data as any, _getConfig() );\n\n\t\t\treturn {\n\t\t\t\tinstance: instance as MultiRootEditor,\n\t\t\t\twatchdog: null\n\t\t\t};\n\t\t}\n\n\t\tconst watchdog = ( () => {\n\t\t\tif ( context instanceof props.editor.ContextWatchdog ) {\n\t\t\t\treturn new EditorWatchdogAdapter( context );\n\t\t\t}\n\n\t\t\treturn new props.editor.EditorWatchdog( props.editor, props.watchdogConfig );\n\t\t} )() as EditorWatchdogAdapter<MultiRootEditor>;\n\n\t\tconst totalRestartsRef = {\n\t\t\tcurrent: 0\n\t\t};\n\n\t\twatchdog.setCreator( async ( data, config ) => {\n\t\t\tconst { onAfterDestroy } = props;\n\n\t\t\tif ( totalRestartsRef.current > 0 && onAfterDestroy && editorRefs.instance.current ) {\n\t\t\t\tonAfterDestroy( editorRefs.instance.current );\n\t\t\t}\n\n\t\t\tconst instance = await _createEditor( data as any, config );\n\n\t\t\tif ( totalRestartsRef.current > 0 ) {\n\t\t\t\tsemaphore.unsafeSetValue( {\n\t\t\t\t\tinstance,\n\t\t\t\t\twatchdog\n\t\t\t\t} );\n\n\t\t\t\tsetTimeout( () => {\n\t\t\t\t\tif ( props.onReady ) {\n\t\t\t\t\t\tprops.onReady( watchdog!.editor );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\ttotalRestartsRef.current++;\n\t\t\treturn instance;\n\t\t} );\n\n\t\twatchdog.on( 'error', ( _, { error, causesRestart } ) => {\n\t\t\tconst onError = props.onError || console.error;\n\t\t\tonError( error, { phase: 'runtime', willEditorRestart: causesRestart } );\n\t\t} );\n\n\t\tawait watchdog\n\t\t\t.create( data as any, _getConfig() )\n\t\t\t.catch( error => {\n\t\t\t\tconst onError = props.onError || console.error;\n\t\t\t\tonError( error, { phase: 'initialization', willEditorRestart: false } );\n\t\t\t\tthrow error;\n\t\t\t} );\n\n\t\treturn {\n\t\t\twatchdog,\n\t\t\tinstance: watchdog!.editor\n\t\t};\n\t};\n\n\tconst _getStateDiff = (\n\t\tpreviousState: Record<string, unknown>,\n\t\tnewState: Record<string, unknown>\n\t): {\n\t\taddedKeys: Array<string>;\n\t\tremovedKeys: Array<string>;\n\t} => {\n\t\tconst previousStateKeys = Object.keys( previousState );\n\t\tconst newStateKeys = Object.keys( newState );\n\n\t\treturn {\n\t\t\taddedKeys: newStateKeys.filter( key => !previousStateKeys.includes( key ) ),\n\t\t\tremovedKeys: previousStateKeys.filter( key => !newStateKeys.includes( key ) )\n\t\t};\n\t};\n\n\tconst _externalSetData: Dispatch<SetStateAction<Record<string, string>>> = useCallback(\n\t\tnewData => {\n\t\t\tsemaphore.runAfterMount( () => {\n\t\t\t\tshouldUpdateEditor.current = true;\n\t\t\t\tsetData( newData );\n\t\t\t} );\n\t\t},\n\t\t[ setData ]\n\t);\n\n\tconst _externalSetAttributes: Dispatch<SetStateAction<Record<string, Record<string, unknown>>>> = useCallback(\n\t\tnewAttributes => {\n\t\t\tsemaphore.runAfterMount( () => {\n\t\t\t\tshouldUpdateEditor.current = true;\n\t\t\t\tsetAttributes( newAttributes );\n\t\t\t} );\n\t\t},\n\t\t[ setAttributes ]\n\t);\n\n\tconst toolbarElement = (\n\t\t<EditorToolbarWrapper\n\t\t\tref={ semaphoreElementRef }\n\t\t\teditor={editorRefs.instance.current}\n\t\t/>\n\t);\n\n\tuseInstantEditorEffect( semaphore.current, ( { instance } ) => {\n\t\tif ( props.disabled ) {\n\t\t\tinstance.enableReadOnlyMode( REACT_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t} else {\n\t\t\tinstance.disableReadOnlyMode( REACT_INTEGRATION_READ_ONLY_LOCK_ID );\n\t\t}\n\t}, [ props.disabled ] );\n\n\tuseInstantEditorEffect( semaphore.current, ( { instance } ) => {\n\t\t// Editor should be only updated when the changes come from the integrator React application.\n\t\tif ( shouldUpdateEditor.current ) {\n\t\t\tshouldUpdateEditor.current = false;\n\n\t\t\tconst dataKeys = Object.keys( data );\n\t\t\tconst attributesKeys = Object.keys( attributes );\n\n\t\t\t// Check if `data` and `attributes` have the same keys.\n\t\t\t//\n\t\t\t// It prevents the addition of attributes for non-existing roots.\n\t\t\t// If the `data` object has a different set of keys, an error will not be thrown\n\t\t\t// since the attributes will be removed/added during root initialization/destruction.\n\t\t\tif ( !dataKeys.every( key => attributesKeys.includes( key ) ) ) {\n\t\t\t\tconsole.error( '`data` and `attributes` objects must have the same keys (roots).' );\n\t\t\t\tthrow new Error( '`data` and `attributes` objects must have the same keys (roots).' );\n\t\t\t}\n\n\t\t\tconst editorData = instance.getFullData();\n\t\t\tconst editorAttributes = instance.getRootsAttributes();\n\n\t\t\tconst {\n\t\t\t\taddedKeys: newRoots,\n\t\t\t\tremovedKeys: removedRoots\n\t\t\t} = _getStateDiff( editorData, data || {} );\n\n\t\t\tconst hasModifiedData = dataKeys.some( rootName =>\n\t\t\t\teditorData[ rootName ] !== undefined &&\n\t\t\t\tJSON.stringify( editorData[ rootName ] ) !== JSON.stringify( data[ rootName ] )\n\t\t\t);\n\n\t\t\tconst rootsWithChangedAttributes = attributesKeys.filter( rootName =>\n\t\t\t\tJSON.stringify( editorAttributes[ rootName ] ) !== JSON.stringify( attributes[ rootName ] ) );\n\n\t\t\tconst _handleNewRoots = ( roots: Array<string> ) => {\n\t\t\t\troots.forEach( rootName => {\n\t\t\t\t\tinstance!.addRoot( rootName, {\n\t\t\t\t\t\tdata: data[ rootName ] || '',\n\t\t\t\t\t\tattributes: attributes?.[ rootName ] || {},\n\t\t\t\t\t\tisUndoable: true\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tconst _handleRemovedRoots = ( roots: Array<string> ) => {\n\t\t\t\troots.forEach( rootName => {\n\t\t\t\t\tinstance!.detachRoot( rootName, true );\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\tconst _updateEditorData = () => {\n\t\t\t\t// If any of the roots content has changed, set the editor data.\n\t\t\t\t// Unfortunately, we cannot set the editor data just for one root,\n\t\t\t\t// so we need to overwrite all roots (`nextProps.data` is an\n\t\t\t\t// object with data for each root).\n\t\t\t\tinstance.data.set( data, { suppressErrorInCollaboration: true } as any );\n\t\t\t};\n\n\t\t\tconst _updateEditorAttributes = ( writer: Writer, roots: Array<string> ) => {\n\t\t\t\troots.forEach( rootName => {\n\t\t\t\t\tObject.keys( attributes![ rootName ] ).forEach( attr => {\n\t\t\t\t\t\tinstance.registerRootAttribute( attr );\n\t\t\t\t\t} );\n\n\t\t\t\t\twriter.clearAttributes( instance.model.document.getRoot( rootName )! );\n\t\t\t\t\twriter.setAttributes( attributes![ rootName ], instance.model.document.getRoot( rootName )! );\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\t// React struggles with rerendering during `instance.model.change` callbacks.\n\t\t\tsetTimeout( () => {\n\t\t\t\tinstance.model.change( writer => {\n\t\t\t\t\t_handleNewRoots( newRoots );\n\t\t\t\t\t_handleRemovedRoots( removedRoots );\n\n\t\t\t\t\tif ( hasModifiedData ) {\n\t\t\t\t\t\t_updateEditorData();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( rootsWithChangedAttributes.length ) {\n\t\t\t\t\t\t_updateEditorAttributes( writer, rootsWithChangedAttributes );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\t}, [ data, attributes ] );\n\n\tconst editableElements = roots.map(\n\t\trootName => (\n\t\t\t<EditorEditable\n\t\t\t\tkey={rootName}\n\t\t\t\tid={rootName}\n\t\t\t\trootName={rootName}\n\t\t\t\tsemaphore={semaphore}\n\t\t\t/>\n\t\t)\n\t);\n\n\treturn {\n\t\teditor: editorRefs.instance.current,\n\t\teditableElements,\n\t\ttoolbarElement,\n\t\tdata, setData: _externalSetData,\n\t\tattributes, setAttributes: _externalSetAttributes\n\t};\n};\n\nconst EditorEditable = memo( forwardRef( ( { id, semaphore, rootName }: {\n\tid: string;\n\trootName: string;\n\tsemaphore: LifeCycleSemaphoreSyncRefResult<LifeCycleMountResult>;\n}, ref ) => {\n\tconst innerRef = useRef<HTMLDivElement>( null );\n\n\tuseEffect( () => {\n\t\tlet editable: InlineEditableUIView | null;\n\t\tlet editor: MultiRootEditor | null;\n\n\t\tsemaphore.runAfterMount( ( { instance } ) => {\n\t\t\tif ( innerRef.current ) {\n\t\t\t\teditor = instance;\n\t\t\t\teditable = instance.ui.view.createEditable( rootName, innerRef.current );\n\n\t\t\t\tinstance.ui.addEditable( editable );\n\t\t\t\tinstance.editing.view.forceRender();\n\t\t\t}\n\t\t} );\n\n\t\treturn () => {\n\t\t\tif ( editable && innerRef.current && editor && editor.state !== 'destroyed' ) {\n\t\t\t\teditor.ui.removeEditable( editable );\n\t\t\t}\n\t\t};\n\t}, [ semaphore.revision ] );\n\n\treturn (\n\t\t<div\n\t\t\tkey={semaphore.revision}\n\t\t\tid={id}\n\t\t\tref={ mergeRefs( ref, innerRef ) }\n\t\t/>\n\t);\n} ) );\n\nEditorEditable.displayName = 'EditorEditable';\n\nconst EditorToolbarWrapper = forwardRef( ( { editor }: any, ref ) => {\n\tconst toolbarRef = useRef<HTMLDivElement>( null );\n\n\tuseEffect( () => {\n\t\tconst toolbarContainer = toolbarRef.current;\n\n\t\tif ( !editor || !toolbarContainer ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst element = editor.ui.view.toolbar.element!;\n\n\t\tif ( toolbarContainer ) {\n\t\t\ttoolbarContainer.appendChild( element! );\n\t\t}\n\n\t\treturn () => {\n\t\t\tif ( toolbarContainer ) {\n\t\t\t\ttoolbarContainer.removeChild( element! );\n\t\t\t}\n\t\t};\n\t}, [ editor && editor.id ] );\n\n\treturn <div ref={mergeRefs( toolbarRef, ref )}></div>;\n} );\n\nEditorToolbarWrapper.displayName = 'EditorToolbarWrapper';\n\nexport default useMultiRootEditor;\n\ntype LifeCycleMountResult = EditorSemaphoreMountResult<MultiRootEditor>;\n\ntype LifeCycleSemaphoreRefs<TEditor extends MultiRootEditor> = {\n\t[ K in keyof EditorSemaphoreMountResult<TEditor> ]: RefObject<EditorSemaphoreMountResult<TEditor>[ K ]>\n};\n\ninterface ErrorDetails {\n\tphase: 'initialization' | 'runtime';\n\twillEditorRestart?: boolean;\n}\n\nexport type MultiRootHookProps = {\n\tid?: any;\n\tsemaphoreElement?: HTMLElement;\n\n\tisLayoutReady?: boolean;\n\tdisabled?: boolean;\n\tdata: Record<string, string>;\n\trootsAttributes?: Record<string, Record<string, unknown>>;\n\teditor: typeof MultiRootEditor;\n\twatchdogConfig?: WatchdogConfig;\n\tdisableWatchdog?: boolean;\n\tdisableTwoWayDataBinding?: boolean;\n\n\tonReady?: ( editor: MultiRootEditor ) => void;\n\tonAfterDestroy?: ( editor: MultiRootEditor ) => void;\n\tonError?: ( error: Error, details: ErrorDetails ) => void;\n\tonChange?: ( event: EventInfo, editor: MultiRootEditor ) => void;\n\tonFocus?: ( event: EventInfo, editor: MultiRootEditor ) => void;\n\tonBlur?: ( event: EventInfo, editor: MultiRootEditor ) => void;\n\n\tconfig?: Record<string, unknown>;\n};\n\nexport type MultiRootHookReturns = {\n\teditor: MultiRootEditor | null;\n\teditableElements: Array<JSX.Element>;\n\ttoolbarElement: JSX.Element;\n\tdata: Record<string, string>;\n\tsetData: Dispatch<SetStateAction<Record<string, string>>>;\n\tattributes: Record<string, Record<string, unknown>>;\n\tsetAttributes: Dispatch<SetStateAction<Record<string, Record<string, unknown>>>>;\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nimport { useRef, useState, type RefObject } from 'react';\nimport type { LifeCycleElementSemaphore, LifeCycleAfterMountCallback } from './LifeCycleElementSemaphore';\n\n/**\n * When using the `useState` approach, a new instance of the semaphore must be set based on the previous\n * one within the `setState` callback, as shown in this example:\n *\n * \t\tsetState( prevSemaphore => ... )\n *\n * The issue arises from the uncertainty of whether React has batched and cancelled some `setState` calls.\n * This means that setting the state with a semaphore three times might result in the collapsing of these three calls into a single one.\n *\n * Although this may not seem like a significant issue in theory, it can lead to a multitude of minor issues in practice that may\n * generate race conditions. This is because semaphores handle batching independently.\n *\n * A solution involving refs is safer in terms of preserving object references. In other words, `semaphoreRef.current` is guaranteed to\n * always point to the most recent instance of the semaphore.\n */\nexport const useLifeCycleSemaphoreSyncRef = <R extends object>(): LifeCycleSemaphoreSyncRefResult<R> => {\n\tconst semaphoreRef = useRef<LifeCycleElementSemaphore<R> | null>( null );\n\tconst [ revision, setRevision ] = useState( () => Date.now() );\n\n\tconst refresh = () => {\n\t\tsetRevision( Date.now() );\n\t};\n\n\tconst release = ( rerender: boolean = true ) => {\n\t\tif ( semaphoreRef.current ) {\n\t\t\tsemaphoreRef.current.release();\n\t\t\tsemaphoreRef.current = null;\n\t\t}\n\n\t\tif ( rerender ) {\n\t\t\tsetRevision( Date.now() );\n\t\t}\n\t};\n\n\tconst unsafeSetValue = ( value: R ) => {\n\t\tsemaphoreRef.current?.unsafeSetValue( value );\n\t\trefresh();\n\t};\n\n\tconst runAfterMount = ( callback: LifeCycleAfterMountCallback<R> ) => {\n\t\tif ( semaphoreRef.current ) {\n\t\t\tsemaphoreRef.current.runAfterMount( callback );\n\t\t}\n\t};\n\n\tconst replace = ( newSemaphore: () => LifeCycleElementSemaphore<R> ) => {\n\t\trelease( false );\n\t\tsemaphoreRef.current = newSemaphore();\n\n\t\trefresh();\n\t\trunAfterMount( refresh );\n\t};\n\n\tconst createAttributeRef = <K extends keyof R>( key: K ): RefObject<R[ K ]> => ( {\n\t\tget current() {\n\t\t\tif ( !semaphoreRef.current || !semaphoreRef.current.value ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn semaphoreRef.current.value[ key ];\n\t\t}\n\t} );\n\n\treturn {\n\t\tget current() {\n\t\t\treturn semaphoreRef.current;\n\t\t},\n\t\trevision,\n\t\tcreateAttributeRef,\n\t\tunsafeSetValue,\n\t\trelease,\n\t\treplace,\n\t\trunAfterMount\n\t};\n};\n\nexport type LifeCycleSemaphoreSyncRefResult<R> = RefObject<LifeCycleElementSemaphore<R>> & {\n\trevision: number;\n\tunsafeSetValue: ( value: R ) => void;\n\trunAfterMount: ( callback: LifeCycleAfterMountCallback<R> ) => void;\n\trelease: ( rerender?: boolean ) => void;\n\treplace: ( newSemaphore: () => LifeCycleElementSemaphore<R> ) => void;\n\tcreateAttributeRef: <K extends keyof R>( key: K ) => RefObject<R[ K ]>;\n};\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * A utility function that removes duplicate elements from an array.\n */\nexport function uniq<A>( source: Array<A> ): Array<A> {\n\treturn Array.from( new Set( source ) );\n}\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__155__","__WEBPACK_EXTERNAL_MODULE__949__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","HEX_NUMBERS","Array","fill","map","_","index","toString","slice","ContextWatchdogContext","CKEditorContext","constructor","props","context","super","contextWatchdog","this","isLayoutReady","_initializeContextWatchdog","config","shouldComponentUpdate","nextProps","_shouldComponentUpdate","id","destroy","children","render","Provider","componentWillUnmount","_destroyContext","watchdogConfig","on","errorEvent","onError","error","phase","willContextRestart","causesRestart","state","onReady","create","catch","defaultProps","details","console","propTypes","LifeCycleElementSemaphore","element","lifecycle","_releaseLock","_value","_afterMountCallbacks","_state","destroyedBeforeInitialization","mountingInProgress","release","fn","lastResult","args","current","once","_element","_lifecycle","then","unmount","mountResult","resolve","_lock","unsafeSetValue","forEach","callback","runAfterMount","push","_semaphores","prevElementSemaphore","Promise","releaseLock","deferred","promise","createDefer","newElementSemaphore","mount","async","afterMount","delete","set","Map","REACT_INTEGRATION_READ_ONLY_LOCK_ID","CKEditor","domContainer","editorSemaphore","_checkVersion","CKEDITOR_VERSION","window","warn","major","split","Number","startsWith","_semaphoreValue","watchdog","editor","instance","disableWatchdog","_shouldUpdateEditorData","data","disabled","enableReadOnlyMode","disableReadOnlyMode","componentDidMount","_initLifeCycleSemaphore","componentDidUpdate","_unlockLifeCycleSemaphore","_initializeEditor","onAfterDestroy","_destroyEditor","innerHTML","ref","_createEditor","_getConfig","ContextWatchdog","EditorWatchdogAdapter","EditorWatchdog","totalRestartsRef","setCreator","el","setTimeout","willEditorRestart","modelDocument","model","document","viewDocument","editing","view","event","onChange","onFocus","onBlur","initializeResult","reject","e","prevProps","initialData","contextType","isRequired","_contextWatchdog","_id","r1","Math","random","r2","r3","r4","uid","creator","_creator","sourceElementOrData","add","type","itemId","remove","getItem","mergeRefs","refs","overwriteObject","source","destination","getOwnPropertyNames","entries","useRefSafeCallback","callbackRef","useRef","useCallback","overwriteArray","length","useInstantEditorEffect","semaphore","deps","prevDeps","b","i","shallowCompareArrays","useInstantEffect","EditorEditable","memo","forwardRef","rootName","innerRef","useEffect","editable","ui","createEditable","addEditable","forceRender","removeEditable","revision","displayName","EditorToolbarWrapper","toolbarRef","toolbarContainer","toolbar","appendChild","removeChild","semaphoreElementRef","semaphoreElement","semaphoreRef","setRevision","useState","Date","now","refresh","rerender","createAttributeRef","replace","newSemaphore","useLifeCycleSemaphoreSyncRef","editorRefs","useContext","roots","setRoots","keys","setData","attributes","setAttributes","rootsAttributes","shouldUpdateEditor","onChangeData","disableTwoWayDataBinding","newData","newAttributes","differ","getChanges","change","position","range","isAttached","getData","getChangedRoots","changedRoot","name","getRootAttributes","previousData","previousAttributes","onAddRoot","evt","prevRoots","uniq","from","Set","onDetachRoot","filter","editorData","getFullData","getRootsAttributes","_externalSetData","_externalSetAttributes","toolbarElement","dataKeys","attributesKeys","every","includes","Error","editorAttributes","addedKeys","newRoots","removedKeys","removedRoots","previousState","newState","previousStateKeys","newStateKeys","_getStateDiff","hasModifiedData","some","JSON","stringify","rootsWithChangedAttributes","_handleNewRoots","addRoot","isUndoable","_handleRemovedRoots","detachRoot","_updateEditorData","suppressErrorInCollaboration","_updateEditorAttributes","writer","attr","registerRootAttribute","clearAttributes","getRoot","editableElements"],"sourceRoot":""}